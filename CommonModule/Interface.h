#pragma once

#using <mscorlib.dll>
#using <System.dll>
#using <System.Data.dll>
#using <System.Xml.dll>

using namespace System::Security::Permissions;
[assembly:SecurityPermissionAttribute(SecurityAction::RequestMinimum, SkipVerification=false)];
// 
// This source code was auto-generated by xsd, Version=4.0.30319.17929.
// 
using namespace System;
ref class NewDataSet;


/// <summary>
///Represents a strongly typed in-memory cache of data.
///</summary>
[System::Serializable, 
System::ComponentModel::DesignerCategoryAttribute(L"code"), 
System::ComponentModel::ToolboxItem(true), 
System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedDataSetSchema"), 
System::Xml::Serialization::XmlRootAttribute(L"NewDataSet"), 
System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.DataSet")]
public ref class NewDataSet : public ::System::Data::DataSet {
    public : ref class InstructionDataTable;
    public : ref class BasicBlockDataTable;
    public : ref class RoutineDataTable;
    public : ref class FunctionDataTable;
    public : ref class InstructionRow;
    public : ref class BasicBlockRow;
    public : ref class RoutineRow;
    public : ref class FunctionRow;
    public : ref class InstructionRowChangeEvent;
    public : ref class BasicBlockRowChangeEvent;
    public : ref class RoutineRowChangeEvent;
    public : ref class FunctionRowChangeEvent;
    
    private: NewDataSet::InstructionDataTable^  tableInstruction;
    
    private: NewDataSet::BasicBlockDataTable^  tableBasicBlock;
    
    private: NewDataSet::RoutineDataTable^  tableRoutine;
    
    private: NewDataSet::FunctionDataTable^  tableFunction;
    
    private: ::System::Data::DataRelation^  relationBasicBlock_Instruction;
    
    private: ::System::Data::DataRelation^  relationFunction_BasicBlock;
    
    private: ::System::Data::DataRelation^  relationRoutine_Function;
    
    private: ::System::Data::SchemaSerializationMode _schemaSerializationMode;
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void InstructionRowChangeEventHandler(::System::Object^  sender, NewDataSet::InstructionRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void BasicBlockRowChangeEventHandler(::System::Object^  sender, NewDataSet::BasicBlockRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void RoutineRowChangeEventHandler(::System::Object^  sender, NewDataSet::RoutineRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void FunctionRowChangeEventHandler(::System::Object^  sender, NewDataSet::FunctionRowChangeEvent^  e);
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    NewDataSet();
    protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    NewDataSet(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::InstructionDataTable^  Instruction {
        NewDataSet::InstructionDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::BasicBlockDataTable^  BasicBlock {
        NewDataSet::BasicBlockDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::RoutineDataTable^  Routine {
        NewDataSet::RoutineDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::FunctionDataTable^  Function {
        NewDataSet::FunctionDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::BrowsableAttribute(true), 
    System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Visible)]
    virtual property ::System::Data::SchemaSerializationMode SchemaSerializationMode {
        ::System::Data::SchemaSerializationMode get() override;
        System::Void set(::System::Data::SchemaSerializationMode value) override;
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Hidden)]
    property ::System::Data::DataTableCollection^  Tables {
        ::System::Data::DataTableCollection^  get() new;
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Hidden)]
    property ::System::Data::DataRelationCollection^  Relations {
        ::System::Data::DataRelationCollection^  get() new;
    }
    
    protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    virtual ::System::Void InitializeDerivedDataSet() override;
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    virtual ::System::Data::DataSet^  Clone() override;
    
    protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    virtual ::System::Boolean ShouldSerializeTables() override;
    
    protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    virtual ::System::Boolean ShouldSerializeRelations() override;
    
    protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    virtual ::System::Void ReadXmlSerializable(::System::Xml::XmlReader^  reader) override;
    
    protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    virtual ::System::Xml::Schema::XmlSchema^  GetSchemaSerializable() override;
    
    internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Void InitVars();
    
    internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Void InitVars(::System::Boolean initTable);
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Void InitClass();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeInstruction();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeBasicBlock();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeRoutine();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeFunction();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Void SchemaChanged(::System::Object^  sender, ::System::ComponentModel::CollectionChangeEventArgs^  e);
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedDataSetSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class InstructionDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnID;
        
        private: ::System::Data::DataColumn^  columnStatementType;
        
        private: ::System::Data::DataColumn^  columnTemporary;
        
        private: ::System::Data::DataColumn^  columnConstant;
        
        private: ::System::Data::DataColumn^  columnIOParameter;
        
        private: ::System::Data::DataColumn^  columnInitialValue;
        
        private: ::System::Data::DataColumn^  columnRefVars;
        
        private: ::System::Data::DataColumn^  columnBasicBlock_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::InstructionRowChangeEventHandler^  InstructionRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::InstructionRowChangeEventHandler^  InstructionRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::InstructionRowChangeEventHandler^  InstructionRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::InstructionRowChangeEventHandler^  InstructionRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        InstructionDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        InstructionDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        InstructionDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  IDColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  StatementTypeColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  TemporaryColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  ConstantColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  IOParameterColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  InitialValueColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  RefVarsColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  BasicBlock_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::InstructionRow^  default [::System::Int32 ] {
            NewDataSet::InstructionRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddInstructionRow(NewDataSet::InstructionRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::InstructionRow^  AddInstructionRow(
                    System::String^  ID, 
                    System::String^  StatementType, 
                    System::Boolean Temporary, 
                    System::Boolean Constant, 
                    System::Boolean IOParameter, 
                    System::String^  InitialValue, 
                    System::String^  RefVars, 
                    NewDataSet::BasicBlockRow^  parentBasicBlockRowByBasicBlock_Instruction);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::InstructionRow^  NewInstructionRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemoveInstructionRow(NewDataSet::InstructionRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class BasicBlockDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnID;
        
        private: ::System::Data::DataColumn^  columnPredecessors;
        
        private: ::System::Data::DataColumn^  columnSuccessors;
        
        private: ::System::Data::DataColumn^  columnBasicBlock_Id;
        
        private: ::System::Data::DataColumn^  columnFunction_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::BasicBlockRowChangeEventHandler^  BasicBlockRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::BasicBlockRowChangeEventHandler^  BasicBlockRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::BasicBlockRowChangeEventHandler^  BasicBlockRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::BasicBlockRowChangeEventHandler^  BasicBlockRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        BasicBlockDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        BasicBlockDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        BasicBlockDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  IDColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  PredecessorsColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  SuccessorsColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  BasicBlock_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  Function_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::BasicBlockRow^  default [::System::Int32 ] {
            NewDataSet::BasicBlockRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddBasicBlockRow(NewDataSet::BasicBlockRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::BasicBlockRow^  AddBasicBlockRow(System::String^  ID, System::String^  Predecessors, System::String^  Successors, 
                    NewDataSet::FunctionRow^  parentFunctionRowByFunction_BasicBlock);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::BasicBlockRow^  NewBasicBlockRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemoveBasicBlockRow(NewDataSet::BasicBlockRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class RoutineDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnName;
        
        private: ::System::Data::DataColumn^  columnRoutine_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::RoutineRowChangeEventHandler^  RoutineRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::RoutineRowChangeEventHandler^  RoutineRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::RoutineRowChangeEventHandler^  RoutineRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::RoutineRowChangeEventHandler^  RoutineRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RoutineDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RoutineDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RoutineDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  NameColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  Routine_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::RoutineRow^  default [::System::Int32 ] {
            NewDataSet::RoutineRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddRoutineRow(NewDataSet::RoutineRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::RoutineRow^  AddRoutineRow(System::String^  Name);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::RoutineRow^  NewRoutineRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemoveRoutineRow(NewDataSet::RoutineRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class FunctionDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnID;
        
        private: ::System::Data::DataColumn^  columnName;
        
        private: ::System::Data::DataColumn^  columnCalledFrom;
        
        private: ::System::Data::DataColumn^  columnInputParameters;
        
        private: ::System::Data::DataColumn^  columnOutputParameters;
        
        private: ::System::Data::DataColumn^  columnFunction_Id;
        
        private: ::System::Data::DataColumn^  columnRoutine_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::FunctionRowChangeEventHandler^  FunctionRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::FunctionRowChangeEventHandler^  FunctionRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::FunctionRowChangeEventHandler^  FunctionRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::FunctionRowChangeEventHandler^  FunctionRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        FunctionDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        FunctionDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        FunctionDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  IDColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  NameColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  CalledFromColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  InputParametersColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  OutputParametersColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  Function_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  Routine_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::FunctionRow^  default [::System::Int32 ] {
            NewDataSet::FunctionRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddFunctionRow(NewDataSet::FunctionRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::FunctionRow^  AddFunctionRow(
                    System::String^  ID, 
                    System::String^  Name, 
                    System::String^  CalledFrom, 
                    System::String^  InputParameters, 
                    System::String^  OutputParameters, 
                    NewDataSet::RoutineRow^  parentRoutineRowByRoutine_Function);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::FunctionRow^  NewFunctionRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemoveFunctionRow(NewDataSet::FunctionRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class InstructionRow : public ::System::Data::DataRow {
        
        private: NewDataSet::InstructionDataTable^  tableInstruction;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        InstructionRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  ID {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  StatementType {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Boolean Temporary {
            System::Boolean get();
            System::Void set(System::Boolean value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Boolean Constant {
            System::Boolean get();
            System::Void set(System::Boolean value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Boolean IOParameter {
            System::Boolean get();
            System::Void set(System::Boolean value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  InitialValue {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  RefVars {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 BasicBlock_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::BasicBlockRow^  BasicBlockRow {
            NewDataSet::BasicBlockRow^  get();
            System::Void set(NewDataSet::BasicBlockRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsInitialValueNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetInitialValueNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsRefVarsNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetRefVarsNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsBasicBlock_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetBasicBlock_IdNull();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class BasicBlockRow : public ::System::Data::DataRow {
        
        private: NewDataSet::BasicBlockDataTable^  tableBasicBlock;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        BasicBlockRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  ID {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  Predecessors {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  Successors {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 BasicBlock_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 Function_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::FunctionRow^  FunctionRow {
            NewDataSet::FunctionRow^  get();
            System::Void set(NewDataSet::FunctionRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsPredecessorsNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetPredecessorsNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsSuccessorsNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetSuccessorsNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsFunction_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetFunction_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::InstructionRow^  >^  GetInstructionRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class RoutineRow : public ::System::Data::DataRow {
        
        private: NewDataSet::RoutineDataTable^  tableRoutine;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RoutineRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  Name {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 Routine_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::FunctionRow^  >^  GetFunctionRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class FunctionRow : public ::System::Data::DataRow {
        
        private: NewDataSet::FunctionDataTable^  tableFunction;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        FunctionRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  ID {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  Name {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  CalledFrom {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  InputParameters {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  OutputParameters {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 Function_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 Routine_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::RoutineRow^  RoutineRow {
            NewDataSet::RoutineRow^  get();
            System::Void set(NewDataSet::RoutineRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsInputParametersNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetInputParametersNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsOutputParametersNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetOutputParametersNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsRoutine_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetRoutine_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::BasicBlockRow^  >^  GetBasicBlockRows();
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class InstructionRowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::InstructionRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        InstructionRowChangeEvent(NewDataSet::InstructionRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::InstructionRow^  Row {
            NewDataSet::InstructionRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class BasicBlockRowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::BasicBlockRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        BasicBlockRowChangeEvent(NewDataSet::BasicBlockRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::BasicBlockRow^  Row {
            NewDataSet::BasicBlockRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class RoutineRowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::RoutineRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RoutineRowChangeEvent(NewDataSet::RoutineRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::RoutineRow^  Row {
            NewDataSet::RoutineRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class FunctionRowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::FunctionRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        FunctionRowChangeEvent(NewDataSet::FunctionRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::FunctionRow^  Row {
            NewDataSet::FunctionRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
};


inline NewDataSet::NewDataSet() {
    this->BeginInit();
    this->InitClass();
    ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &NewDataSet::SchemaChanged);
    __super::Tables->CollectionChanged += schemaChangedHandler;
    __super::Relations->CollectionChanged += schemaChangedHandler;
    this->EndInit();
}

inline NewDataSet::NewDataSet(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataSet(info, context, false) {
    if (this->IsBinarySerialized(info, context) == true) {
        this->InitVars(false);
        ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler1 = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &NewDataSet::SchemaChanged);
        this->Tables->CollectionChanged += schemaChangedHandler1;
        this->Relations->CollectionChanged += schemaChangedHandler1;
        return;
    }
    ::System::String^  strSchema = (cli::safe_cast<::System::String^  >(info->GetValue(L"XmlSchema", ::System::String::typeid)));
    if (this->DetermineSchemaSerializationMode(info, context) == ::System::Data::SchemaSerializationMode::IncludeSchema) {
        ::System::Data::DataSet^  ds = (gcnew ::System::Data::DataSet());
        ds->ReadXmlSchema((gcnew ::System::Xml::XmlTextReader((gcnew ::System::IO::StringReader(strSchema)))));
        if (ds->Tables[L"Instruction"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::InstructionDataTable(ds->Tables[L"Instruction"])));
        }
        if (ds->Tables[L"BasicBlock"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::BasicBlockDataTable(ds->Tables[L"BasicBlock"])));
        }
        if (ds->Tables[L"Routine"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::RoutineDataTable(ds->Tables[L"Routine"])));
        }
        if (ds->Tables[L"Function"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::FunctionDataTable(ds->Tables[L"Function"])));
        }
        this->DataSetName = ds->DataSetName;
        this->Prefix = ds->Prefix;
        this->Namespace = ds->Namespace;
        this->Locale = ds->Locale;
        this->CaseSensitive = ds->CaseSensitive;
        this->EnforceConstraints = ds->EnforceConstraints;
        this->Merge(ds, false, ::System::Data::MissingSchemaAction::Add);
        this->InitVars();
    }
    else {
        this->ReadXmlSchema((gcnew ::System::Xml::XmlTextReader((gcnew ::System::IO::StringReader(strSchema)))));
    }
    this->GetSerializationData(info, context);
    ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &NewDataSet::SchemaChanged);
    __super::Tables->CollectionChanged += schemaChangedHandler;
    this->Relations->CollectionChanged += schemaChangedHandler;
}

inline NewDataSet::InstructionDataTable^  NewDataSet::Instruction::get() {
    return this->tableInstruction;
}

inline NewDataSet::BasicBlockDataTable^  NewDataSet::BasicBlock::get() {
    return this->tableBasicBlock;
}

inline NewDataSet::RoutineDataTable^  NewDataSet::Routine::get() {
    return this->tableRoutine;
}

inline NewDataSet::FunctionDataTable^  NewDataSet::Function::get() {
    return this->tableFunction;
}

inline ::System::Data::SchemaSerializationMode NewDataSet::SchemaSerializationMode::get() {
    return this->_schemaSerializationMode;
}
inline System::Void NewDataSet::SchemaSerializationMode::set(::System::Data::SchemaSerializationMode value) {
    this->_schemaSerializationMode = __identifier(value);
}

inline ::System::Data::DataTableCollection^  NewDataSet::Tables::get() {
    return __super::Tables;
}

inline ::System::Data::DataRelationCollection^  NewDataSet::Relations::get() {
    return __super::Relations;
}

inline ::System::Void NewDataSet::InitializeDerivedDataSet() {
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline ::System::Data::DataSet^  NewDataSet::Clone() {
    NewDataSet^  cln = (cli::safe_cast<NewDataSet^  >(__super::Clone()));
    cln->InitVars();
    cln->SchemaSerializationMode = this->SchemaSerializationMode;
    return cln;
}

inline ::System::Boolean NewDataSet::ShouldSerializeTables() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializeRelations() {
    return false;
}

inline ::System::Void NewDataSet::ReadXmlSerializable(::System::Xml::XmlReader^  reader) {
    if (this->DetermineSchemaSerializationMode(reader) == ::System::Data::SchemaSerializationMode::IncludeSchema) {
        this->Reset();
        ::System::Data::DataSet^  ds = (gcnew ::System::Data::DataSet());
        ds->ReadXml(reader);
        if (ds->Tables[L"Instruction"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::InstructionDataTable(ds->Tables[L"Instruction"])));
        }
        if (ds->Tables[L"BasicBlock"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::BasicBlockDataTable(ds->Tables[L"BasicBlock"])));
        }
        if (ds->Tables[L"Routine"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::RoutineDataTable(ds->Tables[L"Routine"])));
        }
        if (ds->Tables[L"Function"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::FunctionDataTable(ds->Tables[L"Function"])));
        }
        this->DataSetName = ds->DataSetName;
        this->Prefix = ds->Prefix;
        this->Namespace = ds->Namespace;
        this->Locale = ds->Locale;
        this->CaseSensitive = ds->CaseSensitive;
        this->EnforceConstraints = ds->EnforceConstraints;
        this->Merge(ds, false, ::System::Data::MissingSchemaAction::Add);
        this->InitVars();
    }
    else {
        this->ReadXml(reader);
        this->InitVars();
    }
}

inline ::System::Xml::Schema::XmlSchema^  NewDataSet::GetSchemaSerializable() {
    ::System::IO::MemoryStream^  stream = (gcnew ::System::IO::MemoryStream());
    this->WriteXmlSchema((gcnew ::System::Xml::XmlTextWriter(stream, nullptr)));
    stream->Position = 0;
    return ::System::Xml::Schema::XmlSchema::Read((gcnew ::System::Xml::XmlTextReader(stream)), nullptr);
}

inline ::System::Void NewDataSet::InitVars() {
    this->InitVars(true);
}

inline ::System::Void NewDataSet::InitVars(::System::Boolean initTable) {
    this->tableInstruction = (cli::safe_cast<NewDataSet::InstructionDataTable^  >(__super::Tables[L"Instruction"]));
    if (initTable == true) {
        if (this->tableInstruction != nullptr) {
            this->tableInstruction->InitVars();
        }
    }
    this->tableBasicBlock = (cli::safe_cast<NewDataSet::BasicBlockDataTable^  >(__super::Tables[L"BasicBlock"]));
    if (initTable == true) {
        if (this->tableBasicBlock != nullptr) {
            this->tableBasicBlock->InitVars();
        }
    }
    this->tableRoutine = (cli::safe_cast<NewDataSet::RoutineDataTable^  >(__super::Tables[L"Routine"]));
    if (initTable == true) {
        if (this->tableRoutine != nullptr) {
            this->tableRoutine->InitVars();
        }
    }
    this->tableFunction = (cli::safe_cast<NewDataSet::FunctionDataTable^  >(__super::Tables[L"Function"]));
    if (initTable == true) {
        if (this->tableFunction != nullptr) {
            this->tableFunction->InitVars();
        }
    }
    this->relationBasicBlock_Instruction = this->Relations[L"BasicBlock_Instruction"];
    this->relationFunction_BasicBlock = this->Relations[L"Function_BasicBlock"];
    this->relationRoutine_Function = this->Relations[L"Routine_Function"];
}

inline ::System::Void NewDataSet::InitClass() {
    this->DataSetName = L"NewDataSet";
    this->Prefix = L"";
    this->Locale = (gcnew ::System::Globalization::CultureInfo(L""));
    this->EnforceConstraints = true;
    this->SchemaSerializationMode = ::System::Data::SchemaSerializationMode::IncludeSchema;
    this->tableInstruction = (gcnew NewDataSet::InstructionDataTable());
    __super::Tables->Add(this->tableInstruction);
    this->tableBasicBlock = (gcnew NewDataSet::BasicBlockDataTable());
    __super::Tables->Add(this->tableBasicBlock);
    this->tableRoutine = (gcnew NewDataSet::RoutineDataTable());
    __super::Tables->Add(this->tableRoutine);
    this->tableFunction = (gcnew NewDataSet::FunctionDataTable());
    __super::Tables->Add(this->tableFunction);
    ::System::Data::ForeignKeyConstraint^  fkc;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"BasicBlock_Instruction", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableBasicBlock->BasicBlock_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableInstruction->BasicBlock_IdColumn}));
    this->tableInstruction->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"Function_BasicBlock", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableFunction->Function_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableBasicBlock->Function_IdColumn}));
    this->tableBasicBlock->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"Routine_Function", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableRoutine->Routine_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableFunction->Routine_IdColumn}));
    this->tableFunction->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    this->relationBasicBlock_Instruction = (gcnew ::System::Data::DataRelation(L"BasicBlock_Instruction", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableBasicBlock->BasicBlock_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableInstruction->BasicBlock_IdColumn}, false));
    this->relationBasicBlock_Instruction->Nested = true;
    this->Relations->Add(this->relationBasicBlock_Instruction);
    this->relationFunction_BasicBlock = (gcnew ::System::Data::DataRelation(L"Function_BasicBlock", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableFunction->Function_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableBasicBlock->Function_IdColumn}, false));
    this->relationFunction_BasicBlock->Nested = true;
    this->Relations->Add(this->relationFunction_BasicBlock);
    this->relationRoutine_Function = (gcnew ::System::Data::DataRelation(L"Routine_Function", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableRoutine->Routine_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableFunction->Routine_IdColumn}, false));
    this->relationRoutine_Function->Nested = true;
    this->Relations->Add(this->relationRoutine_Function);
}

inline ::System::Boolean NewDataSet::ShouldSerializeInstruction() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializeBasicBlock() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializeRoutine() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializeFunction() {
    return false;
}

inline ::System::Void NewDataSet::SchemaChanged(::System::Object^  sender, ::System::ComponentModel::CollectionChangeEventArgs^  e) {
    if (e->Action == ::System::ComponentModel::CollectionChangeAction::Remove) {
        this->InitVars();
    }
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::GetTypedDataSetSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    ::System::Xml::Schema::XmlSchemaAny^  any = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any->Namespace = ds->Namespace;
    sequence->Items->Add(any);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::InstructionDataTable::InstructionDataTable() {
    this->TableName = L"Instruction";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::InstructionDataTable::InstructionDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::InstructionDataTable::InstructionDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
            ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::InstructionDataTable::IDColumn::get() {
    return this->columnID;
}

inline ::System::Data::DataColumn^  NewDataSet::InstructionDataTable::StatementTypeColumn::get() {
    return this->columnStatementType;
}

inline ::System::Data::DataColumn^  NewDataSet::InstructionDataTable::TemporaryColumn::get() {
    return this->columnTemporary;
}

inline ::System::Data::DataColumn^  NewDataSet::InstructionDataTable::ConstantColumn::get() {
    return this->columnConstant;
}

inline ::System::Data::DataColumn^  NewDataSet::InstructionDataTable::IOParameterColumn::get() {
    return this->columnIOParameter;
}

inline ::System::Data::DataColumn^  NewDataSet::InstructionDataTable::InitialValueColumn::get() {
    return this->columnInitialValue;
}

inline ::System::Data::DataColumn^  NewDataSet::InstructionDataTable::RefVarsColumn::get() {
    return this->columnRefVars;
}

inline ::System::Data::DataColumn^  NewDataSet::InstructionDataTable::BasicBlock_IdColumn::get() {
    return this->columnBasicBlock_Id;
}

inline ::System::Int32 NewDataSet::InstructionDataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::InstructionRow^  NewDataSet::InstructionDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::InstructionRow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::InstructionDataTable::AddInstructionRow(NewDataSet::InstructionRow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::InstructionRow^  NewDataSet::InstructionDataTable::AddInstructionRow(
            System::String^  ID, 
            System::String^  StatementType, 
            System::Boolean Temporary, 
            System::Boolean Constant, 
            System::Boolean IOParameter, 
            System::String^  InitialValue, 
            System::String^  RefVars, 
            NewDataSet::BasicBlockRow^  parentBasicBlockRowByBasicBlock_Instruction) {
    NewDataSet::InstructionRow^  rowInstructionRow = (cli::safe_cast<NewDataSet::InstructionRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(8) {ID, StatementType, Temporary, 
        Constant, IOParameter, InitialValue, RefVars, nullptr};
    if (parentBasicBlockRowByBasicBlock_Instruction != nullptr) {
        columnValuesArray[7] = parentBasicBlockRowByBasicBlock_Instruction[3];
    }
    rowInstructionRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowInstructionRow);
    return rowInstructionRow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::InstructionDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::InstructionDataTable::Clone() {
    NewDataSet::InstructionDataTable^  cln = (cli::safe_cast<NewDataSet::InstructionDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::InstructionDataTable::CreateInstance() {
    return (gcnew NewDataSet::InstructionDataTable());
}

inline ::System::Void NewDataSet::InstructionDataTable::InitVars() {
    this->columnID = __super::Columns[L"ID"];
    this->columnStatementType = __super::Columns[L"StatementType"];
    this->columnTemporary = __super::Columns[L"Temporary"];
    this->columnConstant = __super::Columns[L"Constant"];
    this->columnIOParameter = __super::Columns[L"IOParameter"];
    this->columnInitialValue = __super::Columns[L"InitialValue"];
    this->columnRefVars = __super::Columns[L"RefVars"];
    this->columnBasicBlock_Id = __super::Columns[L"BasicBlock_Id"];
}

inline ::System::Void NewDataSet::InstructionDataTable::InitClass() {
    this->columnID = (gcnew ::System::Data::DataColumn(L"ID", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnID);
    this->columnStatementType = (gcnew ::System::Data::DataColumn(L"StatementType", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnStatementType);
    this->columnTemporary = (gcnew ::System::Data::DataColumn(L"Temporary", ::System::Boolean::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnTemporary);
    this->columnConstant = (gcnew ::System::Data::DataColumn(L"Constant", ::System::Boolean::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnConstant);
    this->columnIOParameter = (gcnew ::System::Data::DataColumn(L"IOParameter", ::System::Boolean::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnIOParameter);
    this->columnInitialValue = (gcnew ::System::Data::DataColumn(L"InitialValue", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnInitialValue);
    this->columnRefVars = (gcnew ::System::Data::DataColumn(L"RefVars", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnRefVars);
    this->columnBasicBlock_Id = (gcnew ::System::Data::DataColumn(L"BasicBlock_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnBasicBlock_Id);
    this->columnID->AllowDBNull = false;
    this->columnID->Namespace = L"";
    this->columnStatementType->AllowDBNull = false;
    this->columnStatementType->Namespace = L"";
    this->columnTemporary->AllowDBNull = false;
    this->columnTemporary->Namespace = L"";
    this->columnConstant->AllowDBNull = false;
    this->columnConstant->Namespace = L"";
    this->columnIOParameter->AllowDBNull = false;
    this->columnIOParameter->Namespace = L"";
    this->columnInitialValue->Namespace = L"";
    this->columnRefVars->Namespace = L"";
}

inline NewDataSet::InstructionRow^  NewDataSet::InstructionDataTable::NewInstructionRow() {
    return (cli::safe_cast<NewDataSet::InstructionRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::InstructionDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::InstructionRow(builder));
}

inline ::System::Type^  NewDataSet::InstructionDataTable::GetRowType() {
    return NewDataSet::InstructionRow::typeid;
}

inline ::System::Void NewDataSet::InstructionDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->InstructionRowChanged(this, (gcnew NewDataSet::InstructionRowChangeEvent((cli::safe_cast<NewDataSet::InstructionRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::InstructionDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->InstructionRowChanging(this, (gcnew NewDataSet::InstructionRowChangeEvent((cli::safe_cast<NewDataSet::InstructionRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::InstructionDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->InstructionRowDeleted(this, (gcnew NewDataSet::InstructionRowChangeEvent((cli::safe_cast<NewDataSet::InstructionRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::InstructionDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->InstructionRowDeleting(this, (gcnew NewDataSet::InstructionRowChangeEvent((cli::safe_cast<NewDataSet::InstructionRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::InstructionDataTable::RemoveInstructionRow(NewDataSet::InstructionRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::InstructionDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"InstructionDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::BasicBlockDataTable::BasicBlockDataTable() {
    this->TableName = L"BasicBlock";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::BasicBlockDataTable::BasicBlockDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::BasicBlockDataTable::BasicBlockDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::BasicBlockDataTable::IDColumn::get() {
    return this->columnID;
}

inline ::System::Data::DataColumn^  NewDataSet::BasicBlockDataTable::PredecessorsColumn::get() {
    return this->columnPredecessors;
}

inline ::System::Data::DataColumn^  NewDataSet::BasicBlockDataTable::SuccessorsColumn::get() {
    return this->columnSuccessors;
}

inline ::System::Data::DataColumn^  NewDataSet::BasicBlockDataTable::BasicBlock_IdColumn::get() {
    return this->columnBasicBlock_Id;
}

inline ::System::Data::DataColumn^  NewDataSet::BasicBlockDataTable::Function_IdColumn::get() {
    return this->columnFunction_Id;
}

inline ::System::Int32 NewDataSet::BasicBlockDataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::BasicBlockRow^  NewDataSet::BasicBlockDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::BasicBlockRow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::BasicBlockDataTable::AddBasicBlockRow(NewDataSet::BasicBlockRow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::BasicBlockRow^  NewDataSet::BasicBlockDataTable::AddBasicBlockRow(System::String^  ID, System::String^  Predecessors, 
            System::String^  Successors, NewDataSet::FunctionRow^  parentFunctionRowByFunction_BasicBlock) {
    NewDataSet::BasicBlockRow^  rowBasicBlockRow = (cli::safe_cast<NewDataSet::BasicBlockRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(5) {ID, Predecessors, Successors, 
        nullptr, nullptr};
    if (parentFunctionRowByFunction_BasicBlock != nullptr) {
        columnValuesArray[4] = parentFunctionRowByFunction_BasicBlock[5];
    }
    rowBasicBlockRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowBasicBlockRow);
    return rowBasicBlockRow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::BasicBlockDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::BasicBlockDataTable::Clone() {
    NewDataSet::BasicBlockDataTable^  cln = (cli::safe_cast<NewDataSet::BasicBlockDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::BasicBlockDataTable::CreateInstance() {
    return (gcnew NewDataSet::BasicBlockDataTable());
}

inline ::System::Void NewDataSet::BasicBlockDataTable::InitVars() {
    this->columnID = __super::Columns[L"ID"];
    this->columnPredecessors = __super::Columns[L"Predecessors"];
    this->columnSuccessors = __super::Columns[L"Successors"];
    this->columnBasicBlock_Id = __super::Columns[L"BasicBlock_Id"];
    this->columnFunction_Id = __super::Columns[L"Function_Id"];
}

inline ::System::Void NewDataSet::BasicBlockDataTable::InitClass() {
    this->columnID = (gcnew ::System::Data::DataColumn(L"ID", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnID);
    this->columnPredecessors = (gcnew ::System::Data::DataColumn(L"Predecessors", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnPredecessors);
    this->columnSuccessors = (gcnew ::System::Data::DataColumn(L"Successors", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnSuccessors);
    this->columnBasicBlock_Id = (gcnew ::System::Data::DataColumn(L"BasicBlock_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnBasicBlock_Id);
    this->columnFunction_Id = (gcnew ::System::Data::DataColumn(L"Function_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnFunction_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnBasicBlock_Id}, 
            true)));
    this->columnID->AllowDBNull = false;
    this->columnID->Namespace = L"";
    this->columnPredecessors->Namespace = L"";
    this->columnSuccessors->Namespace = L"";
    this->columnBasicBlock_Id->AutoIncrement = true;
    this->columnBasicBlock_Id->AllowDBNull = false;
    this->columnBasicBlock_Id->Unique = true;
}

inline NewDataSet::BasicBlockRow^  NewDataSet::BasicBlockDataTable::NewBasicBlockRow() {
    return (cli::safe_cast<NewDataSet::BasicBlockRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::BasicBlockDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::BasicBlockRow(builder));
}

inline ::System::Type^  NewDataSet::BasicBlockDataTable::GetRowType() {
    return NewDataSet::BasicBlockRow::typeid;
}

inline ::System::Void NewDataSet::BasicBlockDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->BasicBlockRowChanged(this, (gcnew NewDataSet::BasicBlockRowChangeEvent((cli::safe_cast<NewDataSet::BasicBlockRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::BasicBlockDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->BasicBlockRowChanging(this, (gcnew NewDataSet::BasicBlockRowChangeEvent((cli::safe_cast<NewDataSet::BasicBlockRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::BasicBlockDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->BasicBlockRowDeleted(this, (gcnew NewDataSet::BasicBlockRowChangeEvent((cli::safe_cast<NewDataSet::BasicBlockRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::BasicBlockDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->BasicBlockRowDeleting(this, (gcnew NewDataSet::BasicBlockRowChangeEvent((cli::safe_cast<NewDataSet::BasicBlockRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::BasicBlockDataTable::RemoveBasicBlockRow(NewDataSet::BasicBlockRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::BasicBlockDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"BasicBlockDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::RoutineDataTable::RoutineDataTable() {
    this->TableName = L"Routine";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::RoutineDataTable::RoutineDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::RoutineDataTable::RoutineDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::RoutineDataTable::NameColumn::get() {
    return this->columnName;
}

inline ::System::Data::DataColumn^  NewDataSet::RoutineDataTable::Routine_IdColumn::get() {
    return this->columnRoutine_Id;
}

inline ::System::Int32 NewDataSet::RoutineDataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::RoutineRow^  NewDataSet::RoutineDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::RoutineRow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::RoutineDataTable::AddRoutineRow(NewDataSet::RoutineRow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::RoutineRow^  NewDataSet::RoutineDataTable::AddRoutineRow(System::String^  Name) {
    NewDataSet::RoutineRow^  rowRoutineRow = (cli::safe_cast<NewDataSet::RoutineRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(2) {Name, nullptr};
    rowRoutineRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowRoutineRow);
    return rowRoutineRow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::RoutineDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::RoutineDataTable::Clone() {
    NewDataSet::RoutineDataTable^  cln = (cli::safe_cast<NewDataSet::RoutineDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::RoutineDataTable::CreateInstance() {
    return (gcnew NewDataSet::RoutineDataTable());
}

inline ::System::Void NewDataSet::RoutineDataTable::InitVars() {
    this->columnName = __super::Columns[L"Name"];
    this->columnRoutine_Id = __super::Columns[L"Routine_Id"];
}

inline ::System::Void NewDataSet::RoutineDataTable::InitClass() {
    this->columnName = (gcnew ::System::Data::DataColumn(L"Name", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnName);
    this->columnRoutine_Id = (gcnew ::System::Data::DataColumn(L"Routine_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnRoutine_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnRoutine_Id}, 
            true)));
    this->columnName->AllowDBNull = false;
    this->columnName->Namespace = L"";
    this->columnRoutine_Id->AutoIncrement = true;
    this->columnRoutine_Id->AllowDBNull = false;
    this->columnRoutine_Id->Unique = true;
}

inline NewDataSet::RoutineRow^  NewDataSet::RoutineDataTable::NewRoutineRow() {
    return (cli::safe_cast<NewDataSet::RoutineRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::RoutineDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::RoutineRow(builder));
}

inline ::System::Type^  NewDataSet::RoutineDataTable::GetRowType() {
    return NewDataSet::RoutineRow::typeid;
}

inline ::System::Void NewDataSet::RoutineDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->RoutineRowChanged(this, (gcnew NewDataSet::RoutineRowChangeEvent((cli::safe_cast<NewDataSet::RoutineRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::RoutineDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->RoutineRowChanging(this, (gcnew NewDataSet::RoutineRowChangeEvent((cli::safe_cast<NewDataSet::RoutineRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::RoutineDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->RoutineRowDeleted(this, (gcnew NewDataSet::RoutineRowChangeEvent((cli::safe_cast<NewDataSet::RoutineRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::RoutineDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->RoutineRowDeleting(this, (gcnew NewDataSet::RoutineRowChangeEvent((cli::safe_cast<NewDataSet::RoutineRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::RoutineDataTable::RemoveRoutineRow(NewDataSet::RoutineRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::RoutineDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"RoutineDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::FunctionDataTable::FunctionDataTable() {
    this->TableName = L"Function";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::FunctionDataTable::FunctionDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::FunctionDataTable::FunctionDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::FunctionDataTable::IDColumn::get() {
    return this->columnID;
}

inline ::System::Data::DataColumn^  NewDataSet::FunctionDataTable::NameColumn::get() {
    return this->columnName;
}

inline ::System::Data::DataColumn^  NewDataSet::FunctionDataTable::CalledFromColumn::get() {
    return this->columnCalledFrom;
}

inline ::System::Data::DataColumn^  NewDataSet::FunctionDataTable::InputParametersColumn::get() {
    return this->columnInputParameters;
}

inline ::System::Data::DataColumn^  NewDataSet::FunctionDataTable::OutputParametersColumn::get() {
    return this->columnOutputParameters;
}

inline ::System::Data::DataColumn^  NewDataSet::FunctionDataTable::Function_IdColumn::get() {
    return this->columnFunction_Id;
}

inline ::System::Data::DataColumn^  NewDataSet::FunctionDataTable::Routine_IdColumn::get() {
    return this->columnRoutine_Id;
}

inline ::System::Int32 NewDataSet::FunctionDataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::FunctionRow^  NewDataSet::FunctionDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::FunctionRow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::FunctionDataTable::AddFunctionRow(NewDataSet::FunctionRow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::FunctionRow^  NewDataSet::FunctionDataTable::AddFunctionRow(
            System::String^  ID, 
            System::String^  Name, 
            System::String^  CalledFrom, 
            System::String^  InputParameters, 
            System::String^  OutputParameters, 
            NewDataSet::RoutineRow^  parentRoutineRowByRoutine_Function) {
    NewDataSet::FunctionRow^  rowFunctionRow = (cli::safe_cast<NewDataSet::FunctionRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(7) {ID, Name, CalledFrom, InputParameters, 
        OutputParameters, nullptr, nullptr};
    if (parentRoutineRowByRoutine_Function != nullptr) {
        columnValuesArray[6] = parentRoutineRowByRoutine_Function[1];
    }
    rowFunctionRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowFunctionRow);
    return rowFunctionRow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::FunctionDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::FunctionDataTable::Clone() {
    NewDataSet::FunctionDataTable^  cln = (cli::safe_cast<NewDataSet::FunctionDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::FunctionDataTable::CreateInstance() {
    return (gcnew NewDataSet::FunctionDataTable());
}

inline ::System::Void NewDataSet::FunctionDataTable::InitVars() {
    this->columnID = __super::Columns[L"ID"];
    this->columnName = __super::Columns[L"Name"];
    this->columnCalledFrom = __super::Columns[L"CalledFrom"];
    this->columnInputParameters = __super::Columns[L"InputParameters"];
    this->columnOutputParameters = __super::Columns[L"OutputParameters"];
    this->columnFunction_Id = __super::Columns[L"Function_Id"];
    this->columnRoutine_Id = __super::Columns[L"Routine_Id"];
}

inline ::System::Void NewDataSet::FunctionDataTable::InitClass() {
    this->columnID = (gcnew ::System::Data::DataColumn(L"ID", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnID);
    this->columnName = (gcnew ::System::Data::DataColumn(L"Name", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnName);
    this->columnCalledFrom = (gcnew ::System::Data::DataColumn(L"CalledFrom", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnCalledFrom);
    this->columnInputParameters = (gcnew ::System::Data::DataColumn(L"InputParameters", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnInputParameters);
    this->columnOutputParameters = (gcnew ::System::Data::DataColumn(L"OutputParameters", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnOutputParameters);
    this->columnFunction_Id = (gcnew ::System::Data::DataColumn(L"Function_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnFunction_Id);
    this->columnRoutine_Id = (gcnew ::System::Data::DataColumn(L"Routine_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnRoutine_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnFunction_Id}, 
            true)));
    this->columnID->AllowDBNull = false;
    this->columnID->Namespace = L"";
    this->columnName->AllowDBNull = false;
    this->columnName->Namespace = L"";
    this->columnCalledFrom->AllowDBNull = false;
    this->columnCalledFrom->Namespace = L"";
    this->columnInputParameters->Namespace = L"";
    this->columnOutputParameters->Namespace = L"";
    this->columnFunction_Id->AutoIncrement = true;
    this->columnFunction_Id->AllowDBNull = false;
    this->columnFunction_Id->Unique = true;
}

inline NewDataSet::FunctionRow^  NewDataSet::FunctionDataTable::NewFunctionRow() {
    return (cli::safe_cast<NewDataSet::FunctionRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::FunctionDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::FunctionRow(builder));
}

inline ::System::Type^  NewDataSet::FunctionDataTable::GetRowType() {
    return NewDataSet::FunctionRow::typeid;
}

inline ::System::Void NewDataSet::FunctionDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->FunctionRowChanged(this, (gcnew NewDataSet::FunctionRowChangeEvent((cli::safe_cast<NewDataSet::FunctionRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::FunctionDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->FunctionRowChanging(this, (gcnew NewDataSet::FunctionRowChangeEvent((cli::safe_cast<NewDataSet::FunctionRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::FunctionDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->FunctionRowDeleted(this, (gcnew NewDataSet::FunctionRowChangeEvent((cli::safe_cast<NewDataSet::FunctionRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::FunctionDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->FunctionRowDeleting(this, (gcnew NewDataSet::FunctionRowChangeEvent((cli::safe_cast<NewDataSet::FunctionRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::FunctionDataTable::RemoveFunctionRow(NewDataSet::FunctionRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::FunctionDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"FunctionDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::InstructionRow::InstructionRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableInstruction = (cli::safe_cast<NewDataSet::InstructionDataTable^  >(this->Table));
}

inline System::String^  NewDataSet::InstructionRow::ID::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tableInstruction->IDColumn]));
}
inline System::Void NewDataSet::InstructionRow::ID::set(System::String^  value) {
    this[this->tableInstruction->IDColumn] = value;
}

inline System::String^  NewDataSet::InstructionRow::StatementType::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tableInstruction->StatementTypeColumn]));
}
inline System::Void NewDataSet::InstructionRow::StatementType::set(System::String^  value) {
    this[this->tableInstruction->StatementTypeColumn] = value;
}

inline System::Boolean NewDataSet::InstructionRow::Temporary::get() {
    return (cli::safe_cast<::System::Boolean >(this[this->tableInstruction->TemporaryColumn]));
}
inline System::Void NewDataSet::InstructionRow::Temporary::set(System::Boolean value) {
    this[this->tableInstruction->TemporaryColumn] = value;
}

inline System::Boolean NewDataSet::InstructionRow::Constant::get() {
    return (cli::safe_cast<::System::Boolean >(this[this->tableInstruction->ConstantColumn]));
}
inline System::Void NewDataSet::InstructionRow::Constant::set(System::Boolean value) {
    this[this->tableInstruction->ConstantColumn] = value;
}

inline System::Boolean NewDataSet::InstructionRow::IOParameter::get() {
    return (cli::safe_cast<::System::Boolean >(this[this->tableInstruction->IOParameterColumn]));
}
inline System::Void NewDataSet::InstructionRow::IOParameter::set(System::Boolean value) {
    this[this->tableInstruction->IOParameterColumn] = value;
}

inline System::String^  NewDataSet::InstructionRow::InitialValue::get() {
    try {
        return (cli::safe_cast<::System::String^  >(this[this->tableInstruction->InitialValueColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'InitialValue\' in table \'Instruction\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::InstructionRow::InitialValue::set(System::String^  value) {
    this[this->tableInstruction->InitialValueColumn] = value;
}

inline System::String^  NewDataSet::InstructionRow::RefVars::get() {
    try {
        return (cli::safe_cast<::System::String^  >(this[this->tableInstruction->RefVarsColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'RefVars\' in table \'Instruction\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::InstructionRow::RefVars::set(System::String^  value) {
    this[this->tableInstruction->RefVarsColumn] = value;
}

inline System::Int32 NewDataSet::InstructionRow::BasicBlock_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableInstruction->BasicBlock_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'BasicBlock_Id\' in table \'Instruction\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::InstructionRow::BasicBlock_Id::set(System::Int32 value) {
    this[this->tableInstruction->BasicBlock_IdColumn] = value;
}

inline NewDataSet::BasicBlockRow^  NewDataSet::InstructionRow::BasicBlockRow::get() {
    return (cli::safe_cast<NewDataSet::BasicBlockRow^  >(this->GetParentRow(this->Table->ParentRelations[L"BasicBlock_Instruction"])));
}
inline System::Void NewDataSet::InstructionRow::BasicBlockRow::set(NewDataSet::BasicBlockRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"BasicBlock_Instruction"]);
}

inline ::System::Boolean NewDataSet::InstructionRow::IsInitialValueNull() {
    return this->IsNull(this->tableInstruction->InitialValueColumn);
}

inline ::System::Void NewDataSet::InstructionRow::SetInitialValueNull() {
    this[this->tableInstruction->InitialValueColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean NewDataSet::InstructionRow::IsRefVarsNull() {
    return this->IsNull(this->tableInstruction->RefVarsColumn);
}

inline ::System::Void NewDataSet::InstructionRow::SetRefVarsNull() {
    this[this->tableInstruction->RefVarsColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean NewDataSet::InstructionRow::IsBasicBlock_IdNull() {
    return this->IsNull(this->tableInstruction->BasicBlock_IdColumn);
}

inline ::System::Void NewDataSet::InstructionRow::SetBasicBlock_IdNull() {
    this[this->tableInstruction->BasicBlock_IdColumn] = ::System::Convert::DBNull;
}


inline NewDataSet::BasicBlockRow::BasicBlockRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableBasicBlock = (cli::safe_cast<NewDataSet::BasicBlockDataTable^  >(this->Table));
}

inline System::String^  NewDataSet::BasicBlockRow::ID::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tableBasicBlock->IDColumn]));
}
inline System::Void NewDataSet::BasicBlockRow::ID::set(System::String^  value) {
    this[this->tableBasicBlock->IDColumn] = value;
}

inline System::String^  NewDataSet::BasicBlockRow::Predecessors::get() {
    try {
        return (cli::safe_cast<::System::String^  >(this[this->tableBasicBlock->PredecessorsColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'Predecessors\' in table \'BasicBlock\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::BasicBlockRow::Predecessors::set(System::String^  value) {
    this[this->tableBasicBlock->PredecessorsColumn] = value;
}

inline System::String^  NewDataSet::BasicBlockRow::Successors::get() {
    try {
        return (cli::safe_cast<::System::String^  >(this[this->tableBasicBlock->SuccessorsColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'Successors\' in table \'BasicBlock\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::BasicBlockRow::Successors::set(System::String^  value) {
    this[this->tableBasicBlock->SuccessorsColumn] = value;
}

inline System::Int32 NewDataSet::BasicBlockRow::BasicBlock_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tableBasicBlock->BasicBlock_IdColumn]));
}
inline System::Void NewDataSet::BasicBlockRow::BasicBlock_Id::set(System::Int32 value) {
    this[this->tableBasicBlock->BasicBlock_IdColumn] = value;
}

inline System::Int32 NewDataSet::BasicBlockRow::Function_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableBasicBlock->Function_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'Function_Id\' in table \'BasicBlock\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::BasicBlockRow::Function_Id::set(System::Int32 value) {
    this[this->tableBasicBlock->Function_IdColumn] = value;
}

inline NewDataSet::FunctionRow^  NewDataSet::BasicBlockRow::FunctionRow::get() {
    return (cli::safe_cast<NewDataSet::FunctionRow^  >(this->GetParentRow(this->Table->ParentRelations[L"Function_BasicBlock"])));
}
inline System::Void NewDataSet::BasicBlockRow::FunctionRow::set(NewDataSet::FunctionRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"Function_BasicBlock"]);
}

inline ::System::Boolean NewDataSet::BasicBlockRow::IsPredecessorsNull() {
    return this->IsNull(this->tableBasicBlock->PredecessorsColumn);
}

inline ::System::Void NewDataSet::BasicBlockRow::SetPredecessorsNull() {
    this[this->tableBasicBlock->PredecessorsColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean NewDataSet::BasicBlockRow::IsSuccessorsNull() {
    return this->IsNull(this->tableBasicBlock->SuccessorsColumn);
}

inline ::System::Void NewDataSet::BasicBlockRow::SetSuccessorsNull() {
    this[this->tableBasicBlock->SuccessorsColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean NewDataSet::BasicBlockRow::IsFunction_IdNull() {
    return this->IsNull(this->tableBasicBlock->Function_IdColumn);
}

inline ::System::Void NewDataSet::BasicBlockRow::SetFunction_IdNull() {
    this[this->tableBasicBlock->Function_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< NewDataSet::InstructionRow^  >^  NewDataSet::BasicBlockRow::GetInstructionRows() {
    if (this->Table->ChildRelations[L"BasicBlock_Instruction"] == nullptr) {
        return gcnew cli::array< NewDataSet::InstructionRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::InstructionRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"BasicBlock_Instruction"])));
    }
}


inline NewDataSet::RoutineRow::RoutineRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableRoutine = (cli::safe_cast<NewDataSet::RoutineDataTable^  >(this->Table));
}

inline System::String^  NewDataSet::RoutineRow::Name::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tableRoutine->NameColumn]));
}
inline System::Void NewDataSet::RoutineRow::Name::set(System::String^  value) {
    this[this->tableRoutine->NameColumn] = value;
}

inline System::Int32 NewDataSet::RoutineRow::Routine_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tableRoutine->Routine_IdColumn]));
}
inline System::Void NewDataSet::RoutineRow::Routine_Id::set(System::Int32 value) {
    this[this->tableRoutine->Routine_IdColumn] = value;
}

inline cli::array< NewDataSet::FunctionRow^  >^  NewDataSet::RoutineRow::GetFunctionRows() {
    if (this->Table->ChildRelations[L"Routine_Function"] == nullptr) {
        return gcnew cli::array< NewDataSet::FunctionRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::FunctionRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"Routine_Function"])));
    }
}


inline NewDataSet::FunctionRow::FunctionRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableFunction = (cli::safe_cast<NewDataSet::FunctionDataTable^  >(this->Table));
}

inline System::String^  NewDataSet::FunctionRow::ID::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tableFunction->IDColumn]));
}
inline System::Void NewDataSet::FunctionRow::ID::set(System::String^  value) {
    this[this->tableFunction->IDColumn] = value;
}

inline System::String^  NewDataSet::FunctionRow::Name::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tableFunction->NameColumn]));
}
inline System::Void NewDataSet::FunctionRow::Name::set(System::String^  value) {
    this[this->tableFunction->NameColumn] = value;
}

inline System::String^  NewDataSet::FunctionRow::CalledFrom::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tableFunction->CalledFromColumn]));
}
inline System::Void NewDataSet::FunctionRow::CalledFrom::set(System::String^  value) {
    this[this->tableFunction->CalledFromColumn] = value;
}

inline System::String^  NewDataSet::FunctionRow::InputParameters::get() {
    try {
        return (cli::safe_cast<::System::String^  >(this[this->tableFunction->InputParametersColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'InputParameters\' in table \'Function\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::FunctionRow::InputParameters::set(System::String^  value) {
    this[this->tableFunction->InputParametersColumn] = value;
}

inline System::String^  NewDataSet::FunctionRow::OutputParameters::get() {
    try {
        return (cli::safe_cast<::System::String^  >(this[this->tableFunction->OutputParametersColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'OutputParameters\' in table \'Function\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::FunctionRow::OutputParameters::set(System::String^  value) {
    this[this->tableFunction->OutputParametersColumn] = value;
}

inline System::Int32 NewDataSet::FunctionRow::Function_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tableFunction->Function_IdColumn]));
}
inline System::Void NewDataSet::FunctionRow::Function_Id::set(System::Int32 value) {
    this[this->tableFunction->Function_IdColumn] = value;
}

inline System::Int32 NewDataSet::FunctionRow::Routine_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableFunction->Routine_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'Routine_Id\' in table \'Function\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::FunctionRow::Routine_Id::set(System::Int32 value) {
    this[this->tableFunction->Routine_IdColumn] = value;
}

inline NewDataSet::RoutineRow^  NewDataSet::FunctionRow::RoutineRow::get() {
    return (cli::safe_cast<NewDataSet::RoutineRow^  >(this->GetParentRow(this->Table->ParentRelations[L"Routine_Function"])));
}
inline System::Void NewDataSet::FunctionRow::RoutineRow::set(NewDataSet::RoutineRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"Routine_Function"]);
}

inline ::System::Boolean NewDataSet::FunctionRow::IsInputParametersNull() {
    return this->IsNull(this->tableFunction->InputParametersColumn);
}

inline ::System::Void NewDataSet::FunctionRow::SetInputParametersNull() {
    this[this->tableFunction->InputParametersColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean NewDataSet::FunctionRow::IsOutputParametersNull() {
    return this->IsNull(this->tableFunction->OutputParametersColumn);
}

inline ::System::Void NewDataSet::FunctionRow::SetOutputParametersNull() {
    this[this->tableFunction->OutputParametersColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean NewDataSet::FunctionRow::IsRoutine_IdNull() {
    return this->IsNull(this->tableFunction->Routine_IdColumn);
}

inline ::System::Void NewDataSet::FunctionRow::SetRoutine_IdNull() {
    this[this->tableFunction->Routine_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< NewDataSet::BasicBlockRow^  >^  NewDataSet::FunctionRow::GetBasicBlockRows() {
    if (this->Table->ChildRelations[L"Function_BasicBlock"] == nullptr) {
        return gcnew cli::array< NewDataSet::BasicBlockRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::BasicBlockRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"Function_BasicBlock"])));
    }
}


inline NewDataSet::InstructionRowChangeEvent::InstructionRowChangeEvent(NewDataSet::InstructionRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::InstructionRow^  NewDataSet::InstructionRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::InstructionRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline NewDataSet::BasicBlockRowChangeEvent::BasicBlockRowChangeEvent(NewDataSet::BasicBlockRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::BasicBlockRow^  NewDataSet::BasicBlockRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::BasicBlockRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline NewDataSet::RoutineRowChangeEvent::RoutineRowChangeEvent(NewDataSet::RoutineRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::RoutineRow^  NewDataSet::RoutineRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::RoutineRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline NewDataSet::FunctionRowChangeEvent::FunctionRowChangeEvent(NewDataSet::FunctionRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::FunctionRow^  NewDataSet::FunctionRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::FunctionRowChangeEvent::Action::get() {
    return this->eventAction;
}
