////////////////////////////////////////////////////////////////////////
//
// Exchange.cs
//
// This file was generated by XMLSpy 2011sp1 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//
////////////////////////////////////////////////////////////////////////
		
namespace ExchangeFormat
{
	abstract class EnumeratorBase : System.Collections.IEnumerator
	{
		System.Collections.IEnumerator inner;

		protected object InnerCurrent { get { return inner.Current; } }

		public EnumeratorBase(System.Collections.IEnumerator inner)
		{
			this.inner = inner;
		}

		public abstract object Current { get; }// { return new NumberType((System.Xml.XmlNode)inner.Current); } }
		public bool MoveNext() { return inner.MoveNext(); }
		public void Reset() { inner.Reset(); }
	}


	public class VariablesType : Altova.Xml.TypeBase
	{
		public static Altova.Xml.Meta.ComplexType StaticInfo { get { return new Altova.Xml.Meta.ComplexType(Exchange_TypeInfo.binder.Types[Exchange_TypeInfo._altova_ti_altova_VariablesType]); }}


		public VariablesType(System.Xml.XmlNode init) : base(init)
 		{
			instantiateMembers();
		} 
		
		private void instantiateMembers()
		{

			Original = new MemberElement_Original (this, Exchange_TypeInfo.binder.Members[Exchange_TypeInfo._altova_mi_altova_VariablesType_altova_Original]);
			Fake = new MemberElement_Fake (this, Exchange_TypeInfo.binder.Members[Exchange_TypeInfo._altova_mi_altova_VariablesType_altova_Fake]);
		}

		internal class Enumerator : EnumeratorBase { 
			public Enumerator(System.Collections.IEnumerator inner) : base(inner) {}
			public override object Current { get { return new VariablesType((System.Xml.XmlNode)InnerCurrent); } }
		}

		// Attributes


		// Elements
	
		public MemberElement_Original Original;
		public class MemberElement_Original : System.Collections.IEnumerable
		{
			private Altova.Xml.TypeBase owner;
			private Altova.TypeInfo.MemberInfo info;
			public MemberElement_Original (Altova.Xml.TypeBase owner, Altova.TypeInfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public OriginalType this [int i] { get { return At(i);} } 
			public OriginalType At(int index) {return new OriginalType(owner.GetElementAt(info, index));}
			public OriginalType First { get  {return new OriginalType(owner.GetElementFirst(info));} }
			public OriginalType Last { get {return new OriginalType(owner.GetElementLast(info));} }
			public OriginalType Append(){return new OriginalType(owner.CreateElement(info));}
			public bool Exists { get {return Count > 0;} }
			public int Count { get {return owner.CountElement(info);} }
			public void Remove() {owner.RemoveElement(info);}
			public void RemoveAt(int index) { owner.RemoveElementAt(info, index); }

			public System.Collections.IEnumerator GetEnumerator()
			{
				return new OriginalType.Enumerator(Altova.Xml.XmlTreeOperations.GetElements(owner.Node, info).GetEnumerator());
			}

			public Altova.Xml.Meta.Element Info { get { return new Altova.Xml.Meta.Element(info); } }
		}	
		public MemberElement_Fake Fake;
		public class MemberElement_Fake : System.Collections.IEnumerable
		{
			private Altova.Xml.TypeBase owner;
			private Altova.TypeInfo.MemberInfo info;
			public MemberElement_Fake (Altova.Xml.TypeBase owner, Altova.TypeInfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public FakeType this [int i] { get { return At(i);} } 
			public FakeType At(int index) {return new FakeType(owner.GetElementAt(info, index));}
			public FakeType First { get  {return new FakeType(owner.GetElementFirst(info));} }
			public FakeType Last { get {return new FakeType(owner.GetElementLast(info));} }
			public FakeType Append(){return new FakeType(owner.CreateElement(info));}
			public bool Exists { get {return Count > 0;} }
			public int Count { get {return owner.CountElement(info);} }
			public void Remove() {owner.RemoveElement(info);}
			public void RemoveAt(int index) { owner.RemoveElementAt(info, index); }

			public System.Collections.IEnumerator GetEnumerator()
			{
				return new FakeType.Enumerator(Altova.Xml.XmlTreeOperations.GetElements(owner.Node, info).GetEnumerator());
			}

			public Altova.Xml.Meta.Element Info { get { return new Altova.Xml.Meta.Element(info); } }
		}	
		public void SetXsiType() 
		{ 
			Altova.Xml.XmlTreeOperations.SetAttribute(Node, "xsi:type", "http://www.w3.org/2001/XMLSchema-instance", 
				new System.Xml.XmlQualifiedName("VariablesType", "")); 				
		}
		
	} // class VariablesType

	public class Exchange : Altova.Xml.TypeBase
	{
		public static Altova.Xml.Meta.ComplexType StaticInfo { get { return new Altova.Xml.Meta.ComplexType(Exchange_TypeInfo.binder.Types[Exchange_TypeInfo._altova_ti_altova_Exchange2]); }}


		public static Exchange LoadFromFile(string filename) 
		{
			return new Exchange(Altova.Xml.XmlTreeOperations.LoadDocument(filename));			
		}

		public static Exchange LoadFromString(string xmlstring) 
		{
			return new Exchange(Altova.Xml.XmlTreeOperations.LoadXml(xmlstring));			
		}

		public static Exchange LoadFromBinary(byte[] binary) 
		{
			return new Exchange(Altova.Xml.XmlTreeOperations.LoadXmlBinary(binary));			
		}

		public void SaveToFile(string filename, bool prettyPrint)
		{
			System.Xml.XmlDocument doc = (System.Xml.XmlDocument) Node;
			if (doc.FirstChild is System.Xml.XmlDeclaration) 
			{
				string encoding = ((System.Xml.XmlDeclaration) doc.FirstChild).Encoding;
				if( encoding == System.String.Empty )
					Altova.Xml.XmlTreeOperations.SaveDocument(doc, filename, "UTF-8", false, false, prettyPrint);
				else
					Altova.Xml.XmlTreeOperations.SaveDocument(doc, filename, encoding, prettyPrint);
			}
			else
				Altova.Xml.XmlTreeOperations.SaveDocument(doc, filename, "UTF-8", false, false, prettyPrint);
		}

		public void SaveToFile(string filename, bool prettyPrint, string encoding)
		{
			SaveToFile( filename, prettyPrint, encoding, System.String.Compare(encoding, "UTF-16BE", true) == 0, System.String.Compare(encoding, "UTF-16", true) == 0 );
		}

		public void SaveToFile(string filename, bool prettyPrint, string encoding, bool bBigEndian, bool bBOM)
		{
			System.Xml.XmlDocument doc = (System.Xml.XmlDocument) Node;
			Altova.Xml.XmlTreeOperations.SaveDocument(doc, filename, encoding, bBigEndian, bBOM, prettyPrint);
		}

		public string SaveToString(bool prettyPrint)
		{
			System.Xml.XmlDocument doc = (System.Xml.XmlDocument) Node;
			return Altova.Xml.XmlTreeOperations.SaveXml(doc, prettyPrint);
		}

		public byte[] SaveToBinary(bool prettyPrint)
		{
			System.Xml.XmlDocument doc = (System.Xml.XmlDocument) Node;
			if (doc.FirstChild is System.Xml.XmlDeclaration) 
			{
				string encoding = ((System.Xml.XmlDeclaration) doc.FirstChild).Encoding;
				if( encoding == System.String.Empty )
					return Altova.Xml.XmlTreeOperations.SaveXmlBinary(doc, "UTF-8", false, false, prettyPrint);
				else
					return Altova.Xml.XmlTreeOperations.SaveXmlBinary(doc, encoding, prettyPrint);
			}
			else
				return Altova.Xml.XmlTreeOperations.SaveXmlBinary(doc, "UTF-8", false, false, prettyPrint);
		}

		public byte[] SaveToBinary(bool prettyPrint, string encoding)
		{
			return SaveToBinary( prettyPrint, encoding, System.String.Compare(encoding, "UTF-16BE", true) == 0, System.String.Compare(encoding, "UTF-16", true) == 0 );
		}

		public byte[] SaveToBinary(bool prettyPrint, string encoding, bool bBigEndian, bool bBOM)
		{
			System.Xml.XmlDocument doc = (System.Xml.XmlDocument) Node;
			return Altova.Xml.XmlTreeOperations.SaveXmlBinary(doc, encoding, bBigEndian, bBOM, prettyPrint);
		}

		public static Exchange CreateDocument()
		{	
			return CreateDocument("UTF-8");
		}

		public static Exchange CreateDocument(string encoding)
		{
			System.Xml.XmlDocument doc = new System.Xml.XmlDocument();
			doc.AppendChild(doc.CreateXmlDeclaration("1.0", encoding, null));
			return new Exchange(doc);
		}

		public void SetDTDLocation(string dtdLocation)
		{
			System.Xml.XmlDocument doc = (System.Xml.XmlDocument) Node;
			string publicId = null;
			string internalSubset = null;
			if (doc.DocumentElement == null)
				throw new System.InvalidOperationException("SetDTDLocation requires a root element.");
			if (doc.DocumentType != null)
			{
				publicId = doc.DocumentType.PublicId;
				internalSubset = doc.DocumentType.InternalSubset;

				doc.RemoveChild(doc.DocumentType);
			}
			doc.InsertBefore(doc.DocumentElement, doc.CreateDocumentType(doc.DocumentElement.Name, publicId, dtdLocation, internalSubset));
		}

		public void SetSchemaLocation(string schemaLocation)
		{
			System.Xml.XmlDocument doc = (System.Xml.XmlDocument) Node;
			if (doc.DocumentElement == null)
				throw new System.InvalidOperationException("SetSchemaLocation requires a root element.");
			System.Xml.XmlAttribute att;
			if (doc.DocumentElement.NamespaceURI == "")
			{
				att = doc.CreateAttribute("xsi", "noNamespaceSchemaLocation", "http://www.w3.org/2001/XMLSchema-instance");
				att.Value = schemaLocation;
			}	
			else
			{
				att = doc.CreateAttribute("xsi", "schemaLocation", "http://www.w3.org/2001/XMLSchema-instance");
				att.Value = doc.DocumentElement.NamespaceURI + " " + schemaLocation;
			}
			doc.DocumentElement.Attributes.Append(att);
		}
	

		public Exchange(System.Xml.XmlNode init) : base(init)
 		{
			instantiateMembers();
		} 
		
		private void instantiateMembers()
		{

			BasicBlock = new MemberElement_BasicBlock (this, Exchange_TypeInfo.binder.Members[Exchange_TypeInfo._altova_mi_altova_Exchange2_altova_BasicBlock]);
			Function = new MemberElement_Function (this, Exchange_TypeInfo.binder.Members[Exchange_TypeInfo._altova_mi_altova_Exchange2_altova_Function]);
			Instruction = new MemberElement_Instruction (this, Exchange_TypeInfo.binder.Members[Exchange_TypeInfo._altova_mi_altova_Exchange2_altova_Instruction]);
			Routine = new MemberElement_Routine (this, Exchange_TypeInfo.binder.Members[Exchange_TypeInfo._altova_mi_altova_Exchange2_altova_Routine]);
			Variable = new MemberElement_Variable (this, Exchange_TypeInfo.binder.Members[Exchange_TypeInfo._altova_mi_altova_Exchange2_altova_Variable]);
		}

		internal class Enumerator : EnumeratorBase { 
			public Enumerator(System.Collections.IEnumerator inner) : base(inner) {}
			public override object Current { get { return new Exchange((System.Xml.XmlNode)InnerCurrent); } }
		}

		// Attributes


		// Elements
	
		public MemberElement_BasicBlock BasicBlock;
		public class MemberElement_BasicBlock : System.Collections.IEnumerable
		{
			private Altova.Xml.TypeBase owner;
			private Altova.TypeInfo.MemberInfo info;
			public MemberElement_BasicBlock (Altova.Xml.TypeBase owner, Altova.TypeInfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public BasicBlockType this [int i] { get { return At(i);} } 
			public BasicBlockType At(int index) {return new BasicBlockType(owner.GetElementAt(info, index));}
			public BasicBlockType First { get  {return new BasicBlockType(owner.GetElementFirst(info));} }
			public BasicBlockType Last { get {return new BasicBlockType(owner.GetElementLast(info));} }
			public BasicBlockType Append(){return new BasicBlockType(owner.CreateElement(info));}
			public bool Exists { get {return Count > 0;} }
			public int Count { get {return owner.CountElement(info);} }
			public void Remove() {owner.RemoveElement(info);}
			public void RemoveAt(int index) { owner.RemoveElementAt(info, index); }

			public System.Collections.IEnumerator GetEnumerator()
			{
				return new BasicBlockType.Enumerator(Altova.Xml.XmlTreeOperations.GetElements(owner.Node, info).GetEnumerator());
			}

			public Altova.Xml.Meta.Element Info { get { return new Altova.Xml.Meta.Element(info); } }
		}	
		public MemberElement_Function Function;
		public class MemberElement_Function : System.Collections.IEnumerable
		{
			private Altova.Xml.TypeBase owner;
			private Altova.TypeInfo.MemberInfo info;
			public MemberElement_Function (Altova.Xml.TypeBase owner, Altova.TypeInfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public FunctionType this [int i] { get { return At(i);} } 
			public FunctionType At(int index) {return new FunctionType(owner.GetElementAt(info, index));}
			public FunctionType First { get  {return new FunctionType(owner.GetElementFirst(info));} }
			public FunctionType Last { get {return new FunctionType(owner.GetElementLast(info));} }
			public FunctionType Append(){return new FunctionType(owner.CreateElement(info));}
			public bool Exists { get {return Count > 0;} }
			public int Count { get {return owner.CountElement(info);} }
			public void Remove() {owner.RemoveElement(info);}
			public void RemoveAt(int index) { owner.RemoveElementAt(info, index); }

			public System.Collections.IEnumerator GetEnumerator()
			{
				return new FunctionType.Enumerator(Altova.Xml.XmlTreeOperations.GetElements(owner.Node, info).GetEnumerator());
			}

			public Altova.Xml.Meta.Element Info { get { return new Altova.Xml.Meta.Element(info); } }
		}	
		public MemberElement_Instruction Instruction;
		public class MemberElement_Instruction : System.Collections.IEnumerable
		{
			private Altova.Xml.TypeBase owner;
			private Altova.TypeInfo.MemberInfo info;
			public MemberElement_Instruction (Altova.Xml.TypeBase owner, Altova.TypeInfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public InstructionType this [int i] { get { return At(i);} } 
			public InstructionType At(int index) {return new InstructionType(owner.GetElementAt(info, index));}
			public InstructionType First { get  {return new InstructionType(owner.GetElementFirst(info));} }
			public InstructionType Last { get {return new InstructionType(owner.GetElementLast(info));} }
			public InstructionType Append(){return new InstructionType(owner.CreateElement(info));}
			public bool Exists { get {return Count > 0;} }
			public int Count { get {return owner.CountElement(info);} }
			public void Remove() {owner.RemoveElement(info);}
			public void RemoveAt(int index) { owner.RemoveElementAt(info, index); }

			public System.Collections.IEnumerator GetEnumerator()
			{
				return new InstructionType.Enumerator(Altova.Xml.XmlTreeOperations.GetElements(owner.Node, info).GetEnumerator());
			}

			public Altova.Xml.Meta.Element Info { get { return new Altova.Xml.Meta.Element(info); } }
		}	
		public MemberElement_Routine Routine;
		public class MemberElement_Routine : System.Collections.IEnumerable
		{
			private Altova.Xml.TypeBase owner;
			private Altova.TypeInfo.MemberInfo info;
			public MemberElement_Routine (Altova.Xml.TypeBase owner, Altova.TypeInfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public RoutineType this [int i] { get { return At(i);} } 
			public RoutineType At(int index) {return new RoutineType(owner.GetElementAt(info, index));}
			public RoutineType First { get  {return new RoutineType(owner.GetElementFirst(info));} }
			public RoutineType Last { get {return new RoutineType(owner.GetElementLast(info));} }
			public RoutineType Append(){return new RoutineType(owner.CreateElement(info));}
			public bool Exists { get {return Count > 0;} }
			public int Count { get {return owner.CountElement(info);} }
			public void Remove() {owner.RemoveElement(info);}
			public void RemoveAt(int index) { owner.RemoveElementAt(info, index); }

			public System.Collections.IEnumerator GetEnumerator()
			{
				return new RoutineType.Enumerator(Altova.Xml.XmlTreeOperations.GetElements(owner.Node, info).GetEnumerator());
			}

			public Altova.Xml.Meta.Element Info { get { return new Altova.Xml.Meta.Element(info); } }
		}	
		public MemberElement_Variable Variable;
		public class MemberElement_Variable : System.Collections.IEnumerable
		{
			private Altova.Xml.TypeBase owner;
			private Altova.TypeInfo.MemberInfo info;
			public MemberElement_Variable (Altova.Xml.TypeBase owner, Altova.TypeInfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public VariableType this [int i] { get { return At(i);} } 
			public VariableType At(int index) {return new VariableType(owner.GetElementAt(info, index));}
			public VariableType First { get  {return new VariableType(owner.GetElementFirst(info));} }
			public VariableType Last { get {return new VariableType(owner.GetElementLast(info));} }
			public VariableType Append(){return new VariableType(owner.CreateElement(info));}
			public bool Exists { get {return Count > 0;} }
			public int Count { get {return owner.CountElement(info);} }
			public void Remove() {owner.RemoveElement(info);}
			public void RemoveAt(int index) { owner.RemoveElementAt(info, index); }

			public System.Collections.IEnumerator GetEnumerator()
			{
				return new VariableType.Enumerator(Altova.Xml.XmlTreeOperations.GetElements(owner.Node, info).GetEnumerator());
			}

			public Altova.Xml.Meta.Element Info { get { return new Altova.Xml.Meta.Element(info); } }
		}	
		public void SetXsiType() 
		{ 
			Altova.Xml.XmlTreeOperations.SetAttribute(Node, "xsi:type", "http://www.w3.org/2001/XMLSchema-instance", 
				new System.Xml.XmlQualifiedName("Exchange", "")); 				
		}
		
	} // class Exchange2

	public class BasicBlockType : Altova.Xml.TypeBase
	{
		public static Altova.Xml.Meta.ComplexType StaticInfo { get { return new Altova.Xml.Meta.ComplexType(Exchange_TypeInfo.binder.Types[Exchange_TypeInfo._altova_ti_altova_BasicBlockType]); }}


		public BasicBlockType(System.Xml.XmlNode init) : base(init)
 		{
			instantiateMembers();
		} 
		
		private void instantiateMembers()
		{
			ID = new MemberAttribute_ID (this, Exchange_TypeInfo.binder.Members[Exchange_TypeInfo._altova_mi_altova_BasicBlockType_altova_ID]);
			Predecessors = new MemberAttribute_Predecessors (this, Exchange_TypeInfo.binder.Members[Exchange_TypeInfo._altova_mi_altova_BasicBlockType_altova_Predecessors]);
			Successors = new MemberAttribute_Successors (this, Exchange_TypeInfo.binder.Members[Exchange_TypeInfo._altova_mi_altova_BasicBlockType_altova_Successors]);

			Instruction = new MemberElement_Instruction (this, Exchange_TypeInfo.binder.Members[Exchange_TypeInfo._altova_mi_altova_BasicBlockType_altova_Instruction]);
		}

		internal class Enumerator : EnumeratorBase { 
			public Enumerator(System.Collections.IEnumerator inner) : base(inner) {}
			public override object Current { get { return new BasicBlockType((System.Xml.XmlNode)InnerCurrent); } }
		}

		// Attributes
		public MemberAttribute_ID ID;
		public class MemberAttribute_ID
		{
			private Altova.Xml.TypeBase owner;
			private Altova.TypeInfo.MemberInfo info; 
			public MemberAttribute_ID (Altova.Xml.TypeBase owner, Altova.TypeInfo.MemberInfo info) {this.owner = owner; this.info = info;}
			public string Value { get {
				return (string)Altova.Xml.XmlTreeOperations.CastToString(Altova.Xml.XmlTreeOperations.FindAttribute(owner.Node, info), info);			
			}
			set {	
				Altova.Xml.XmlTreeOperations.SetValue(owner.Node, info, value);		
			} }
			public bool Exists() {return owner.GetAttribute(info) != null;}
			public void Remove() {owner.RemoveAttribute(info);} 

			public Altova.Xml.Meta.Attribute Info { get { return new Altova.Xml.Meta.Attribute(info); } }
		}
		public MemberAttribute_Predecessors Predecessors;
		public class MemberAttribute_Predecessors
		{
			private Altova.Xml.TypeBase owner;
			private Altova.TypeInfo.MemberInfo info; 
			public MemberAttribute_Predecessors (Altova.Xml.TypeBase owner, Altova.TypeInfo.MemberInfo info) {this.owner = owner; this.info = info;}
			public string Value { get {
				return (string)Altova.Xml.XmlTreeOperations.CastToString(Altova.Xml.XmlTreeOperations.FindAttribute(owner.Node, info), info);			
			}
			set {	
				Altova.Xml.XmlTreeOperations.SetValue(owner.Node, info, value);		
			} }
			public bool Exists() {return owner.GetAttribute(info) != null;}
			public void Remove() {owner.RemoveAttribute(info);} 

			public Altova.Xml.Meta.Attribute Info { get { return new Altova.Xml.Meta.Attribute(info); } }
		}
		public MemberAttribute_Successors Successors;
		public class MemberAttribute_Successors
		{
			private Altova.Xml.TypeBase owner;
			private Altova.TypeInfo.MemberInfo info; 
			public MemberAttribute_Successors (Altova.Xml.TypeBase owner, Altova.TypeInfo.MemberInfo info) {this.owner = owner; this.info = info;}
			public string Value { get {
				return (string)Altova.Xml.XmlTreeOperations.CastToString(Altova.Xml.XmlTreeOperations.FindAttribute(owner.Node, info), info);			
			}
			set {	
				Altova.Xml.XmlTreeOperations.SetValue(owner.Node, info, value);		
			} }
			public bool Exists() {return owner.GetAttribute(info) != null;}
			public void Remove() {owner.RemoveAttribute(info);} 

			public Altova.Xml.Meta.Attribute Info { get { return new Altova.Xml.Meta.Attribute(info); } }
		}


		// Elements
	
		public MemberElement_Instruction Instruction;
		public class MemberElement_Instruction : System.Collections.IEnumerable
		{
			private Altova.Xml.TypeBase owner;
			private Altova.TypeInfo.MemberInfo info;
			public MemberElement_Instruction (Altova.Xml.TypeBase owner, Altova.TypeInfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public InstructionType this [int i] { get { return At(i);} } 
			public InstructionType At(int index) {return new InstructionType(owner.GetElementAt(info, index));}
			public InstructionType First { get  {return new InstructionType(owner.GetElementFirst(info));} }
			public InstructionType Last { get {return new InstructionType(owner.GetElementLast(info));} }
			public InstructionType Append(){return new InstructionType(owner.CreateElement(info));}
			public bool Exists { get {return Count > 0;} }
			public int Count { get {return owner.CountElement(info);} }
			public void Remove() {owner.RemoveElement(info);}
			public void RemoveAt(int index) { owner.RemoveElementAt(info, index); }

			public System.Collections.IEnumerator GetEnumerator()
			{
				return new InstructionType.Enumerator(Altova.Xml.XmlTreeOperations.GetElements(owner.Node, info).GetEnumerator());
			}

			public Altova.Xml.Meta.Element Info { get { return new Altova.Xml.Meta.Element(info); } }
		}		
	} // class BasicBlockType

	public class InstructionType : Altova.Xml.TypeBase
	{
		public static Altova.Xml.Meta.ComplexType StaticInfo { get { return new Altova.Xml.Meta.ComplexType(Exchange_TypeInfo.binder.Types[Exchange_TypeInfo._altova_ti_altova_InstructionType]); }}


		public InstructionType(System.Xml.XmlNode init) : base(init)
 		{
			instantiateMembers();
		} 
		
		private void instantiateMembers()
		{
			ID = new MemberAttribute_ID (this, Exchange_TypeInfo.binder.Members[Exchange_TypeInfo._altova_mi_altova_InstructionType_altova_ID]);
			StatementType = new MemberAttribute_StatementType (this, Exchange_TypeInfo.binder.Members[Exchange_TypeInfo._altova_mi_altova_InstructionType_altova_StatementType]);
			PolyRequired = new MemberAttribute_PolyRequired (this, Exchange_TypeInfo.binder.Members[Exchange_TypeInfo._altova_mi_altova_InstructionType_altova_PolyRequired]);
			RefVars = new MemberAttribute_RefVars (this, Exchange_TypeInfo.binder.Members[Exchange_TypeInfo._altova_mi_altova_InstructionType_altova_RefVars]);

		}

		internal class Enumerator : EnumeratorBase { 
			public Enumerator(System.Collections.IEnumerator inner) : base(inner) {}
			public override object Current { get { return new InstructionType((System.Xml.XmlNode)InnerCurrent); } }
		}

		// Attributes
		public string Value
		{
			get 
			{
				Altova.TypeInfo.MemberInfo member = Exchange_TypeInfo.binder.Members[Exchange_TypeInfo._altova_mi_altova_InstructionType_altova_unnamed];
				return (string)Altova.Xml.XmlTreeOperations.CastToString(Node, member);
			}
			set
			{
				Altova.TypeInfo.MemberInfo member = Exchange_TypeInfo.binder.Members[Exchange_TypeInfo._altova_mi_altova_InstructionType_altova_unnamed];
				Altova.Xml.XmlTreeOperations.SetValue(Node, member, value);
			}
		}
		public MemberAttribute_ID ID;
		public class MemberAttribute_ID
		{
			private Altova.Xml.TypeBase owner;
			private Altova.TypeInfo.MemberInfo info; 
			public MemberAttribute_ID (Altova.Xml.TypeBase owner, Altova.TypeInfo.MemberInfo info) {this.owner = owner; this.info = info;}
			public string Value { get {
				return (string)Altova.Xml.XmlTreeOperations.CastToString(Altova.Xml.XmlTreeOperations.FindAttribute(owner.Node, info), info);			
			}
			set {	
				Altova.Xml.XmlTreeOperations.SetValue(owner.Node, info, value);		
			} }
			public bool Exists() {return owner.GetAttribute(info) != null;}
			public void Remove() {owner.RemoveAttribute(info);} 

			public Altova.Xml.Meta.Attribute Info { get { return new Altova.Xml.Meta.Attribute(info); } }
		}
		public MemberAttribute_StatementType StatementType;
		public class MemberAttribute_StatementType
		{
			private Altova.Xml.TypeBase owner;
			private Altova.TypeInfo.MemberInfo info; 
			public MemberAttribute_StatementType (Altova.Xml.TypeBase owner, Altova.TypeInfo.MemberInfo info) {this.owner = owner; this.info = info;}
			public string Value { get {
				return (string)Altova.Xml.XmlTreeOperations.CastToString(Altova.Xml.XmlTreeOperations.FindAttribute(owner.Node, info), info);			
			}
			set {	
				Altova.Xml.XmlTreeOperations.SetValue(owner.Node, info, value);		
			} }
			public bool Exists() {return owner.GetAttribute(info) != null;}
			public void Remove() {owner.RemoveAttribute(info);} 

			public Altova.Xml.Meta.Attribute Info { get { return new Altova.Xml.Meta.Attribute(info); } }


			public StatementTypeType.EnumValues EnumerationValue
			{
				get
				{			
					return (StatementTypeType.EnumValues)GetEnumerationIndex(info, Altova.Xml.XmlTreeOperations.CastToString(Altova.Xml.XmlTreeOperations.FindAttribute(owner.Node, info), info), 0, 9);
				}
				
				set
				{
					if( (int)value >= 0 && (int)value < 9) 
						Altova.Xml.XmlTreeOperations.SetValue(owner.Node, info, info.DataType.facets[(int)value + 0].stringValue);
					else
						throw new System.IndexOutOfRangeException();
				}
			}
		}
		public MemberAttribute_PolyRequired PolyRequired;
		public class MemberAttribute_PolyRequired
		{
			private Altova.Xml.TypeBase owner;
			private Altova.TypeInfo.MemberInfo info; 
			public MemberAttribute_PolyRequired (Altova.Xml.TypeBase owner, Altova.TypeInfo.MemberInfo info) {this.owner = owner; this.info = info;}
			public bool Value { get {
				return (bool)Altova.Xml.XmlTreeOperations.CastToBool(Altova.Xml.XmlTreeOperations.FindAttribute(owner.Node, info), info);			
			}
			set {	
				Altova.Xml.XmlTreeOperations.SetValue(owner.Node, info, value);		
			} }
			public bool Exists() {return owner.GetAttribute(info) != null;}
			public void Remove() {owner.RemoveAttribute(info);} 

			public Altova.Xml.Meta.Attribute Info { get { return new Altova.Xml.Meta.Attribute(info); } }
		}
		public MemberAttribute_RefVars RefVars;
		public class MemberAttribute_RefVars
		{
			private Altova.Xml.TypeBase owner;
			private Altova.TypeInfo.MemberInfo info; 
			public MemberAttribute_RefVars (Altova.Xml.TypeBase owner, Altova.TypeInfo.MemberInfo info) {this.owner = owner; this.info = info;}
			public string Value { get {
				return (string)Altova.Xml.XmlTreeOperations.CastToString(Altova.Xml.XmlTreeOperations.FindAttribute(owner.Node, info), info);			
			}
			set {	
				Altova.Xml.XmlTreeOperations.SetValue(owner.Node, info, value);		
			} }
			public bool Exists() {return owner.GetAttribute(info) != null;}
			public void Remove() {owner.RemoveAttribute(info);} 

			public Altova.Xml.Meta.Attribute Info { get { return new Altova.Xml.Meta.Attribute(info); } }
		}


		// Elements
	
		public void SetXsiType() 
		{ 
			Altova.Xml.XmlTreeOperations.SetAttribute(Node, "xsi:type", "http://www.w3.org/2001/XMLSchema-instance", 
				new System.Xml.XmlQualifiedName("anySimpleType", "http://www.w3.org/2001/XMLSchema")); 				
		}
		
	} // class InstructionType

	public class FunctionType : Altova.Xml.TypeBase
	{
		public static Altova.Xml.Meta.ComplexType StaticInfo { get { return new Altova.Xml.Meta.ComplexType(Exchange_TypeInfo.binder.Types[Exchange_TypeInfo._altova_ti_altova_FunctionType]); }}


		public FunctionType(System.Xml.XmlNode init) : base(init)
 		{
			instantiateMembers();
		} 
		
		private void instantiateMembers()
		{
			ID = new MemberAttribute_ID (this, Exchange_TypeInfo.binder.Members[Exchange_TypeInfo._altova_mi_altova_FunctionType_altova_ID]);
			ExternalLabel = new MemberAttribute_ExternalLabel (this, Exchange_TypeInfo.binder.Members[Exchange_TypeInfo._altova_mi_altova_FunctionType_altova_ExternalLabel]);
			CalledFrom = new MemberAttribute_CalledFrom (this, Exchange_TypeInfo.binder.Members[Exchange_TypeInfo._altova_mi_altova_FunctionType_altova_CalledFrom]);

			Inputs = new MemberElement_Inputs (this, Exchange_TypeInfo.binder.Members[Exchange_TypeInfo._altova_mi_altova_FunctionType_altova_Inputs]);
			Outputs = new MemberElement_Outputs (this, Exchange_TypeInfo.binder.Members[Exchange_TypeInfo._altova_mi_altova_FunctionType_altova_Outputs]);
			Locals = new MemberElement_Locals (this, Exchange_TypeInfo.binder.Members[Exchange_TypeInfo._altova_mi_altova_FunctionType_altova_Locals]);
			BasicBlock = new MemberElement_BasicBlock (this, Exchange_TypeInfo.binder.Members[Exchange_TypeInfo._altova_mi_altova_FunctionType_altova_BasicBlock]);
		}

		internal class Enumerator : EnumeratorBase { 
			public Enumerator(System.Collections.IEnumerator inner) : base(inner) {}
			public override object Current { get { return new FunctionType((System.Xml.XmlNode)InnerCurrent); } }
		}

		// Attributes
		public MemberAttribute_ID ID;
		public class MemberAttribute_ID
		{
			private Altova.Xml.TypeBase owner;
			private Altova.TypeInfo.MemberInfo info; 
			public MemberAttribute_ID (Altova.Xml.TypeBase owner, Altova.TypeInfo.MemberInfo info) {this.owner = owner; this.info = info;}
			public string Value { get {
				return (string)Altova.Xml.XmlTreeOperations.CastToString(Altova.Xml.XmlTreeOperations.FindAttribute(owner.Node, info), info);			
			}
			set {	
				Altova.Xml.XmlTreeOperations.SetValue(owner.Node, info, value);		
			} }
			public bool Exists() {return owner.GetAttribute(info) != null;}
			public void Remove() {owner.RemoveAttribute(info);} 

			public Altova.Xml.Meta.Attribute Info { get { return new Altova.Xml.Meta.Attribute(info); } }
		}
		public MemberAttribute_ExternalLabel ExternalLabel;
		public class MemberAttribute_ExternalLabel
		{
			private Altova.Xml.TypeBase owner;
			private Altova.TypeInfo.MemberInfo info; 
			public MemberAttribute_ExternalLabel (Altova.Xml.TypeBase owner, Altova.TypeInfo.MemberInfo info) {this.owner = owner; this.info = info;}
			public string Value { get {
				return (string)Altova.Xml.XmlTreeOperations.CastToString(Altova.Xml.XmlTreeOperations.FindAttribute(owner.Node, info), info);			
			}
			set {	
				Altova.Xml.XmlTreeOperations.SetValue(owner.Node, info, value);		
			} }
			public bool Exists() {return owner.GetAttribute(info) != null;}
			public void Remove() {owner.RemoveAttribute(info);} 

			public Altova.Xml.Meta.Attribute Info { get { return new Altova.Xml.Meta.Attribute(info); } }
		}
		public MemberAttribute_CalledFrom CalledFrom;
		public class MemberAttribute_CalledFrom
		{
			private Altova.Xml.TypeBase owner;
			private Altova.TypeInfo.MemberInfo info; 
			public MemberAttribute_CalledFrom (Altova.Xml.TypeBase owner, Altova.TypeInfo.MemberInfo info) {this.owner = owner; this.info = info;}
			public string Value { get {
				return (string)Altova.Xml.XmlTreeOperations.CastToString(Altova.Xml.XmlTreeOperations.FindAttribute(owner.Node, info), info);			
			}
			set {	
				Altova.Xml.XmlTreeOperations.SetValue(owner.Node, info, value);		
			} }
			public bool Exists() {return owner.GetAttribute(info) != null;}
			public void Remove() {owner.RemoveAttribute(info);} 

			public Altova.Xml.Meta.Attribute Info { get { return new Altova.Xml.Meta.Attribute(info); } }


			public CalledFromType.EnumValues EnumerationValue
			{
				get
				{			
					return (CalledFromType.EnumValues)GetEnumerationIndex(info, Altova.Xml.XmlTreeOperations.CastToString(Altova.Xml.XmlTreeOperations.FindAttribute(owner.Node, info), info), 0, 3);
				}
				
				set
				{
					if( (int)value >= 0 && (int)value < 3) 
						Altova.Xml.XmlTreeOperations.SetValue(owner.Node, info, info.DataType.facets[(int)value + 0].stringValue);
					else
						throw new System.IndexOutOfRangeException();
				}
			}
		}


		// Elements
	
		public MemberElement_Inputs Inputs;
		public class MemberElement_Inputs : System.Collections.IEnumerable
		{
			private Altova.Xml.TypeBase owner;
			private Altova.TypeInfo.MemberInfo info;
			public MemberElement_Inputs (Altova.Xml.TypeBase owner, Altova.TypeInfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public VariablesType this [int i] { get { return At(i);} } 
			public VariablesType At(int index) {return new VariablesType(owner.GetElementAt(info, index));}
			public VariablesType First { get  {return new VariablesType(owner.GetElementFirst(info));} }
			public VariablesType Last { get {return new VariablesType(owner.GetElementLast(info));} }
			public VariablesType Append(){return new VariablesType(owner.CreateElement(info));}
			public bool Exists { get {return Count > 0;} }
			public int Count { get {return owner.CountElement(info);} }
			public void Remove() {owner.RemoveElement(info);}
			public void RemoveAt(int index) { owner.RemoveElementAt(info, index); }

			public System.Collections.IEnumerator GetEnumerator()
			{
				return new VariablesType.Enumerator(Altova.Xml.XmlTreeOperations.GetElements(owner.Node, info).GetEnumerator());
			}

			public Altova.Xml.Meta.Element Info { get { return new Altova.Xml.Meta.Element(info); } }
		}	
		public MemberElement_Outputs Outputs;
		public class MemberElement_Outputs : System.Collections.IEnumerable
		{
			private Altova.Xml.TypeBase owner;
			private Altova.TypeInfo.MemberInfo info;
			public MemberElement_Outputs (Altova.Xml.TypeBase owner, Altova.TypeInfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public VariablesType this [int i] { get { return At(i);} } 
			public VariablesType At(int index) {return new VariablesType(owner.GetElementAt(info, index));}
			public VariablesType First { get  {return new VariablesType(owner.GetElementFirst(info));} }
			public VariablesType Last { get {return new VariablesType(owner.GetElementLast(info));} }
			public VariablesType Append(){return new VariablesType(owner.CreateElement(info));}
			public bool Exists { get {return Count > 0;} }
			public int Count { get {return owner.CountElement(info);} }
			public void Remove() {owner.RemoveElement(info);}
			public void RemoveAt(int index) { owner.RemoveElementAt(info, index); }

			public System.Collections.IEnumerator GetEnumerator()
			{
				return new VariablesType.Enumerator(Altova.Xml.XmlTreeOperations.GetElements(owner.Node, info).GetEnumerator());
			}

			public Altova.Xml.Meta.Element Info { get { return new Altova.Xml.Meta.Element(info); } }
		}	
		public MemberElement_Locals Locals;
		public class MemberElement_Locals : System.Collections.IEnumerable
		{
			private Altova.Xml.TypeBase owner;
			private Altova.TypeInfo.MemberInfo info;
			public MemberElement_Locals (Altova.Xml.TypeBase owner, Altova.TypeInfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public VariablesType this [int i] { get { return At(i);} } 
			public VariablesType At(int index) {return new VariablesType(owner.GetElementAt(info, index));}
			public VariablesType First { get  {return new VariablesType(owner.GetElementFirst(info));} }
			public VariablesType Last { get {return new VariablesType(owner.GetElementLast(info));} }
			public VariablesType Append(){return new VariablesType(owner.CreateElement(info));}
			public bool Exists { get {return Count > 0;} }
			public int Count { get {return owner.CountElement(info);} }
			public void Remove() {owner.RemoveElement(info);}
			public void RemoveAt(int index) { owner.RemoveElementAt(info, index); }

			public System.Collections.IEnumerator GetEnumerator()
			{
				return new VariablesType.Enumerator(Altova.Xml.XmlTreeOperations.GetElements(owner.Node, info).GetEnumerator());
			}

			public Altova.Xml.Meta.Element Info { get { return new Altova.Xml.Meta.Element(info); } }
		}	
		public MemberElement_BasicBlock BasicBlock;
		public class MemberElement_BasicBlock : System.Collections.IEnumerable
		{
			private Altova.Xml.TypeBase owner;
			private Altova.TypeInfo.MemberInfo info;
			public MemberElement_BasicBlock (Altova.Xml.TypeBase owner, Altova.TypeInfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public BasicBlockType this [int i] { get { return At(i);} } 
			public BasicBlockType At(int index) {return new BasicBlockType(owner.GetElementAt(info, index));}
			public BasicBlockType First { get  {return new BasicBlockType(owner.GetElementFirst(info));} }
			public BasicBlockType Last { get {return new BasicBlockType(owner.GetElementLast(info));} }
			public BasicBlockType Append(){return new BasicBlockType(owner.CreateElement(info));}
			public bool Exists { get {return Count > 0;} }
			public int Count { get {return owner.CountElement(info);} }
			public void Remove() {owner.RemoveElement(info);}
			public void RemoveAt(int index) { owner.RemoveElementAt(info, index); }

			public System.Collections.IEnumerator GetEnumerator()
			{
				return new BasicBlockType.Enumerator(Altova.Xml.XmlTreeOperations.GetElements(owner.Node, info).GetEnumerator());
			}

			public Altova.Xml.Meta.Element Info { get { return new Altova.Xml.Meta.Element(info); } }
		}		
	} // class FunctionType

	public class CalledFromType : Altova.Xml.TypeBase
	{
		public static Altova.Xml.Meta.SimpleType StaticInfo { get { return new Altova.Xml.Meta.SimpleType(Exchange_TypeInfo.binder.Types[Exchange_TypeInfo._altova_ti_altova_CalledFromType]); }}


		public enum EnumValues
		{
			eInternalOnly = 0, // InternalOnly
			eExternalOnly = 1, // ExternalOnly
			eBoth = 2, // Both
			Invalid = -1, // Invalid value
		};

		public CalledFromType(System.Xml.XmlNode init) : base(init)
 		{
			instantiateMembers();
		} 
		
		private void instantiateMembers()
		{

		}


		// Attributes


		// Elements
		
	} // class CalledFromType

	public class RoutineType : Altova.Xml.TypeBase
	{
		public static Altova.Xml.Meta.ComplexType StaticInfo { get { return new Altova.Xml.Meta.ComplexType(Exchange_TypeInfo.binder.Types[Exchange_TypeInfo._altova_ti_altova_RoutineType]); }}


		public RoutineType(System.Xml.XmlNode init) : base(init)
 		{
			instantiateMembers();
		} 
		
		private void instantiateMembers()
		{
			Description = new MemberAttribute_Description (this, Exchange_TypeInfo.binder.Members[Exchange_TypeInfo._altova_mi_altova_RoutineType_altova_Description]);

			Function = new MemberElement_Function (this, Exchange_TypeInfo.binder.Members[Exchange_TypeInfo._altova_mi_altova_RoutineType_altova_Function]);
		}

		internal class Enumerator : EnumeratorBase { 
			public Enumerator(System.Collections.IEnumerator inner) : base(inner) {}
			public override object Current { get { return new RoutineType((System.Xml.XmlNode)InnerCurrent); } }
		}

		// Attributes
		public MemberAttribute_Description Description;
		public class MemberAttribute_Description
		{
			private Altova.Xml.TypeBase owner;
			private Altova.TypeInfo.MemberInfo info; 
			public MemberAttribute_Description (Altova.Xml.TypeBase owner, Altova.TypeInfo.MemberInfo info) {this.owner = owner; this.info = info;}
			public string Value { get {
				return (string)Altova.Xml.XmlTreeOperations.CastToString(Altova.Xml.XmlTreeOperations.FindAttribute(owner.Node, info), info);			
			}
			set {	
				Altova.Xml.XmlTreeOperations.SetValue(owner.Node, info, value);		
			} }
			public bool Exists() {return owner.GetAttribute(info) != null;}
			public void Remove() {owner.RemoveAttribute(info);} 

			public Altova.Xml.Meta.Attribute Info { get { return new Altova.Xml.Meta.Attribute(info); } }
		}


		// Elements
	
		public MemberElement_Function Function;
		public class MemberElement_Function : System.Collections.IEnumerable
		{
			private Altova.Xml.TypeBase owner;
			private Altova.TypeInfo.MemberInfo info;
			public MemberElement_Function (Altova.Xml.TypeBase owner, Altova.TypeInfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public FunctionType this [int i] { get { return At(i);} } 
			public FunctionType At(int index) {return new FunctionType(owner.GetElementAt(info, index));}
			public FunctionType First { get  {return new FunctionType(owner.GetElementFirst(info));} }
			public FunctionType Last { get {return new FunctionType(owner.GetElementLast(info));} }
			public FunctionType Append(){return new FunctionType(owner.CreateElement(info));}
			public bool Exists { get {return Count > 0;} }
			public int Count { get {return owner.CountElement(info);} }
			public void Remove() {owner.RemoveElement(info);}
			public void RemoveAt(int index) { owner.RemoveElementAt(info, index); }

			public System.Collections.IEnumerator GetEnumerator()
			{
				return new FunctionType.Enumerator(Altova.Xml.XmlTreeOperations.GetElements(owner.Node, info).GetEnumerator());
			}

			public Altova.Xml.Meta.Element Info { get { return new Altova.Xml.Meta.Element(info); } }
		}		
	} // class RoutineType

	public class VariableType : Altova.Xml.TypeBase
	{
		public static Altova.Xml.Meta.ComplexType StaticInfo { get { return new Altova.Xml.Meta.ComplexType(Exchange_TypeInfo.binder.Types[Exchange_TypeInfo._altova_ti_altova_VariableType]); }}


		public VariableType(System.Xml.XmlNode init) : base(init)
 		{
			instantiateMembers();
		} 
		
		private void instantiateMembers()
		{
			ID = new MemberAttribute_ID (this, Exchange_TypeInfo.binder.Members[Exchange_TypeInfo._altova_mi_altova_VariableType_altova_ID]);
			Size = new MemberAttribute_Size (this, Exchange_TypeInfo.binder.Members[Exchange_TypeInfo._altova_mi_altova_VariableType_altova_Size]);
			Pointer = new MemberAttribute_Pointer (this, Exchange_TypeInfo.binder.Members[Exchange_TypeInfo._altova_mi_altova_VariableType_altova_Pointer]);
			ConstValueInParam = new MemberAttribute_ConstValueInParam (this, Exchange_TypeInfo.binder.Members[Exchange_TypeInfo._altova_mi_altova_VariableType_altova_ConstValueInParam]);

		}

		internal class Enumerator : EnumeratorBase { 
			public Enumerator(System.Collections.IEnumerator inner) : base(inner) {}
			public override object Current { get { return new VariableType((System.Xml.XmlNode)InnerCurrent); } }
		}

		// Attributes
		public string Value
		{
			get 
			{
				Altova.TypeInfo.MemberInfo member = Exchange_TypeInfo.binder.Members[Exchange_TypeInfo._altova_mi_altova_VariableType_altova_unnamed];
				return (string)Altova.Xml.XmlTreeOperations.CastToString(Node, member);
			}
			set
			{
				Altova.TypeInfo.MemberInfo member = Exchange_TypeInfo.binder.Members[Exchange_TypeInfo._altova_mi_altova_VariableType_altova_unnamed];
				Altova.Xml.XmlTreeOperations.SetValue(Node, member, value);
			}
		}
		public MemberAttribute_ID ID;
		public class MemberAttribute_ID
		{
			private Altova.Xml.TypeBase owner;
			private Altova.TypeInfo.MemberInfo info; 
			public MemberAttribute_ID (Altova.Xml.TypeBase owner, Altova.TypeInfo.MemberInfo info) {this.owner = owner; this.info = info;}
			public string Value { get {
				return (string)Altova.Xml.XmlTreeOperations.CastToString(Altova.Xml.XmlTreeOperations.FindAttribute(owner.Node, info), info);			
			}
			set {	
				Altova.Xml.XmlTreeOperations.SetValue(owner.Node, info, value);		
			} }
			public bool Exists() {return owner.GetAttribute(info) != null;}
			public void Remove() {owner.RemoveAttribute(info);} 

			public Altova.Xml.Meta.Attribute Info { get { return new Altova.Xml.Meta.Attribute(info); } }
		}
		public MemberAttribute_Size Size;
		public class MemberAttribute_Size
		{
			private Altova.Xml.TypeBase owner;
			private Altova.TypeInfo.MemberInfo info; 
			public MemberAttribute_Size (Altova.Xml.TypeBase owner, Altova.TypeInfo.MemberInfo info) {this.owner = owner; this.info = info;}
			public string Value { get {
				return (string)Altova.Xml.XmlTreeOperations.CastToString(Altova.Xml.XmlTreeOperations.FindAttribute(owner.Node, info), info);			
			}
			set {	
				Altova.Xml.XmlTreeOperations.SetValue(owner.Node, info, value);		
			} }
			public bool Exists() {return owner.GetAttribute(info) != null;}
			public void Remove() {owner.RemoveAttribute(info);} 

			public Altova.Xml.Meta.Attribute Info { get { return new Altova.Xml.Meta.Attribute(info); } }


			public SizeType.EnumValues EnumerationValue
			{
				get
				{			
					return (SizeType.EnumValues)GetEnumerationIndex(info, Altova.Xml.XmlTreeOperations.CastToString(Altova.Xml.XmlTreeOperations.FindAttribute(owner.Node, info), info), 0, 5);
				}
				
				set
				{
					if( (int)value >= 0 && (int)value < 5) 
						Altova.Xml.XmlTreeOperations.SetValue(owner.Node, info, info.DataType.facets[(int)value + 0].stringValue);
					else
						throw new System.IndexOutOfRangeException();
				}
			}
		}
		public MemberAttribute_Pointer Pointer;
		public class MemberAttribute_Pointer
		{
			private Altova.Xml.TypeBase owner;
			private Altova.TypeInfo.MemberInfo info; 
			public MemberAttribute_Pointer (Altova.Xml.TypeBase owner, Altova.TypeInfo.MemberInfo info) {this.owner = owner; this.info = info;}
			public bool Value { get {
				return (bool)Altova.Xml.XmlTreeOperations.CastToBool(Altova.Xml.XmlTreeOperations.FindAttribute(owner.Node, info), info);			
			}
			set {	
				Altova.Xml.XmlTreeOperations.SetValue(owner.Node, info, value);		
			} }
			public bool Exists() {return owner.GetAttribute(info) != null;}
			public void Remove() {owner.RemoveAttribute(info);} 

			public Altova.Xml.Meta.Attribute Info { get { return new Altova.Xml.Meta.Attribute(info); } }
		}
		public MemberAttribute_ConstValueInParam ConstValueInParam;
		public class MemberAttribute_ConstValueInParam
		{
			private Altova.Xml.TypeBase owner;
			private Altova.TypeInfo.MemberInfo info; 
			public MemberAttribute_ConstValueInParam (Altova.Xml.TypeBase owner, Altova.TypeInfo.MemberInfo info) {this.owner = owner; this.info = info;}
			public int Value { get {
				return (int)Altova.Xml.XmlTreeOperations.CastToInt(Altova.Xml.XmlTreeOperations.FindAttribute(owner.Node, info), info);			
			}
			set {	
				Altova.Xml.XmlTreeOperations.SetValue(owner.Node, info, value);		
			} }
			public bool Exists() {return owner.GetAttribute(info) != null;}
			public void Remove() {owner.RemoveAttribute(info);} 

			public Altova.Xml.Meta.Attribute Info { get { return new Altova.Xml.Meta.Attribute(info); } }
		}


		// Elements
	
		public void SetXsiType() 
		{ 
			Altova.Xml.XmlTreeOperations.SetAttribute(Node, "xsi:type", "http://www.w3.org/2001/XMLSchema-instance", 
				new System.Xml.XmlQualifiedName("anySimpleType", "http://www.w3.org/2001/XMLSchema")); 				
		}
		
	} // class VariableType

	public class SizeType : Altova.Xml.TypeBase
	{
		public static Altova.Xml.Meta.SimpleType StaticInfo { get { return new Altova.Xml.Meta.SimpleType(Exchange_TypeInfo.binder.Types[Exchange_TypeInfo._altova_ti_altova_SizeType]); }}


		public enum EnumValues
		{
			eword = 0, // word
			edword = 1, // dword
			ebyte = 2, // byte
			eqword = 3, // qword
			eunknown = 4, // unknown
			Invalid = -1, // Invalid value
		};

		public SizeType(System.Xml.XmlNode init) : base(init)
 		{
			instantiateMembers();
		} 
		
		private void instantiateMembers()
		{

		}


		// Attributes


		// Elements
		
	} // class SizeType

	public class OriginalType : Altova.Xml.TypeBase
	{
		public static Altova.Xml.Meta.ComplexType StaticInfo { get { return new Altova.Xml.Meta.ComplexType(Exchange_TypeInfo.binder.Types[Exchange_TypeInfo._altova_ti_altova_OriginalType]); }}


		public OriginalType(System.Xml.XmlNode init) : base(init)
 		{
			instantiateMembers();
		} 
		
		private void instantiateMembers()
		{

			Variable = new MemberElement_Variable (this, Exchange_TypeInfo.binder.Members[Exchange_TypeInfo._altova_mi_altova_OriginalType_altova_Variable]);
		}

		internal class Enumerator : EnumeratorBase { 
			public Enumerator(System.Collections.IEnumerator inner) : base(inner) {}
			public override object Current { get { return new OriginalType((System.Xml.XmlNode)InnerCurrent); } }
		}

		// Attributes


		// Elements
	
		public MemberElement_Variable Variable;
		public class MemberElement_Variable : System.Collections.IEnumerable
		{
			private Altova.Xml.TypeBase owner;
			private Altova.TypeInfo.MemberInfo info;
			public MemberElement_Variable (Altova.Xml.TypeBase owner, Altova.TypeInfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public VariableType this [int i] { get { return At(i);} } 
			public VariableType At(int index) {return new VariableType(owner.GetElementAt(info, index));}
			public VariableType First { get  {return new VariableType(owner.GetElementFirst(info));} }
			public VariableType Last { get {return new VariableType(owner.GetElementLast(info));} }
			public VariableType Append(){return new VariableType(owner.CreateElement(info));}
			public bool Exists { get {return Count > 0;} }
			public int Count { get {return owner.CountElement(info);} }
			public void Remove() {owner.RemoveElement(info);}
			public void RemoveAt(int index) { owner.RemoveElementAt(info, index); }

			public System.Collections.IEnumerator GetEnumerator()
			{
				return new VariableType.Enumerator(Altova.Xml.XmlTreeOperations.GetElements(owner.Node, info).GetEnumerator());
			}

			public Altova.Xml.Meta.Element Info { get { return new Altova.Xml.Meta.Element(info); } }
		}		
	} // class OriginalType

	public class FakeType : Altova.Xml.TypeBase
	{
		public static Altova.Xml.Meta.ComplexType StaticInfo { get { return new Altova.Xml.Meta.ComplexType(Exchange_TypeInfo.binder.Types[Exchange_TypeInfo._altova_ti_altova_FakeType]); }}


		public FakeType(System.Xml.XmlNode init) : base(init)
 		{
			instantiateMembers();
		} 
		
		private void instantiateMembers()
		{

			Variable = new MemberElement_Variable (this, Exchange_TypeInfo.binder.Members[Exchange_TypeInfo._altova_mi_altova_FakeType_altova_Variable]);
		}

		internal class Enumerator : EnumeratorBase { 
			public Enumerator(System.Collections.IEnumerator inner) : base(inner) {}
			public override object Current { get { return new FakeType((System.Xml.XmlNode)InnerCurrent); } }
		}

		// Attributes


		// Elements
	
		public MemberElement_Variable Variable;
		public class MemberElement_Variable : System.Collections.IEnumerable
		{
			private Altova.Xml.TypeBase owner;
			private Altova.TypeInfo.MemberInfo info;
			public MemberElement_Variable (Altova.Xml.TypeBase owner, Altova.TypeInfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public VariableType this [int i] { get { return At(i);} } 
			public VariableType At(int index) {return new VariableType(owner.GetElementAt(info, index));}
			public VariableType First { get  {return new VariableType(owner.GetElementFirst(info));} }
			public VariableType Last { get {return new VariableType(owner.GetElementLast(info));} }
			public VariableType Append(){return new VariableType(owner.CreateElement(info));}
			public bool Exists { get {return Count > 0;} }
			public int Count { get {return owner.CountElement(info);} }
			public void Remove() {owner.RemoveElement(info);}
			public void RemoveAt(int index) { owner.RemoveElementAt(info, index); }

			public System.Collections.IEnumerator GetEnumerator()
			{
				return new VariableType.Enumerator(Altova.Xml.XmlTreeOperations.GetElements(owner.Node, info).GetEnumerator());
			}

			public Altova.Xml.Meta.Element Info { get { return new Altova.Xml.Meta.Element(info); } }
		}		
	} // class FakeType

	public class StatementTypeType : Altova.Xml.TypeBase
	{
		public static Altova.Xml.Meta.SimpleType StaticInfo { get { return new Altova.Xml.Meta.SimpleType(Exchange_TypeInfo.binder.Types[Exchange_TypeInfo._altova_ti_altova_StatementTypeType]); }}


		public enum EnumValues
		{
			eFullAssignment = 0, // FullAssignment
			eUnaryAssignment = 1, // UnaryAssignment
			eCopy = 2, // Copy
			eUnconditionalJump = 3, // UnconditionalJump
			eConditionalJump = 4, // ConditionalJump
			eCall = 5, // Call
			eIndexedAssignment = 6, // IndexedAssignment
			ePointerAssignment = 7, // PointerAssignment
			eUnknown = 8, // Unknown
			Invalid = -1, // Invalid value
		};

		public StatementTypeType(System.Xml.XmlNode init) : base(init)
 		{
			instantiateMembers();
		} 
		
		private void instantiateMembers()
		{

		}


		// Attributes


		// Elements
		
	} // class StatementTypeType


namespace xs
{	
	public class ENTITIES : Altova.Xml.TypeBase
	{
		public static Altova.Xml.Meta.SimpleType StaticInfo { get { return new Altova.Xml.Meta.SimpleType(Exchange_TypeInfo.binder.Types[Exchange_TypeInfo._altova_ti_xs_altova_ENTITIES]); }}


		public ENTITIES(System.Xml.XmlNode init) : base(init)
 		{
			instantiateMembers();
		} 
		
		private void instantiateMembers()
		{

		}


		// Attributes


		// Elements
		
	} // class ENTITIES

	public class ENTITY : Altova.Xml.TypeBase
	{
		public static Altova.Xml.Meta.SimpleType StaticInfo { get { return new Altova.Xml.Meta.SimpleType(Exchange_TypeInfo.binder.Types[Exchange_TypeInfo._altova_ti_xs_altova_ENTITY]); }}


		public ENTITY(System.Xml.XmlNode init) : base(init)
 		{
			instantiateMembers();
		} 
		
		private void instantiateMembers()
		{

		}


		// Attributes


		// Elements
		
	} // class ENTITY

	public class ID : Altova.Xml.TypeBase
	{
		public static Altova.Xml.Meta.SimpleType StaticInfo { get { return new Altova.Xml.Meta.SimpleType(Exchange_TypeInfo.binder.Types[Exchange_TypeInfo._altova_ti_xs_altova_ID]); }}


		public ID(System.Xml.XmlNode init) : base(init)
 		{
			instantiateMembers();
		} 
		
		private void instantiateMembers()
		{

		}


		// Attributes


		// Elements
		
	} // class ID

	public class IDREF : Altova.Xml.TypeBase
	{
		public static Altova.Xml.Meta.SimpleType StaticInfo { get { return new Altova.Xml.Meta.SimpleType(Exchange_TypeInfo.binder.Types[Exchange_TypeInfo._altova_ti_xs_altova_IDREF]); }}


		public IDREF(System.Xml.XmlNode init) : base(init)
 		{
			instantiateMembers();
		} 
		
		private void instantiateMembers()
		{

		}


		// Attributes


		// Elements
		
	} // class IDREF

	public class IDREFS : Altova.Xml.TypeBase
	{
		public static Altova.Xml.Meta.SimpleType StaticInfo { get { return new Altova.Xml.Meta.SimpleType(Exchange_TypeInfo.binder.Types[Exchange_TypeInfo._altova_ti_xs_altova_IDREFS]); }}


		public IDREFS(System.Xml.XmlNode init) : base(init)
 		{
			instantiateMembers();
		} 
		
		private void instantiateMembers()
		{

		}


		// Attributes


		// Elements
		
	} // class IDREFS

	public class NCName : Altova.Xml.TypeBase
	{
		public static Altova.Xml.Meta.SimpleType StaticInfo { get { return new Altova.Xml.Meta.SimpleType(Exchange_TypeInfo.binder.Types[Exchange_TypeInfo._altova_ti_xs_altova_NCName]); }}


		public NCName(System.Xml.XmlNode init) : base(init)
 		{
			instantiateMembers();
		} 
		
		private void instantiateMembers()
		{

		}


		// Attributes


		// Elements
		
	} // class NCName

	public class NMTOKEN : Altova.Xml.TypeBase
	{
		public static Altova.Xml.Meta.SimpleType StaticInfo { get { return new Altova.Xml.Meta.SimpleType(Exchange_TypeInfo.binder.Types[Exchange_TypeInfo._altova_ti_xs_altova_NMTOKEN]); }}


		public NMTOKEN(System.Xml.XmlNode init) : base(init)
 		{
			instantiateMembers();
		} 
		
		private void instantiateMembers()
		{

		}


		// Attributes


		// Elements
		
	} // class NMTOKEN

	public class NMTOKENS : Altova.Xml.TypeBase
	{
		public static Altova.Xml.Meta.SimpleType StaticInfo { get { return new Altova.Xml.Meta.SimpleType(Exchange_TypeInfo.binder.Types[Exchange_TypeInfo._altova_ti_xs_altova_NMTOKENS]); }}


		public NMTOKENS(System.Xml.XmlNode init) : base(init)
 		{
			instantiateMembers();
		} 
		
		private void instantiateMembers()
		{

		}


		// Attributes


		// Elements
		
	} // class NMTOKENS

	public class NOTATION : Altova.Xml.TypeBase
	{
		public static Altova.Xml.Meta.SimpleType StaticInfo { get { return new Altova.Xml.Meta.SimpleType(Exchange_TypeInfo.binder.Types[Exchange_TypeInfo._altova_ti_xs_altova_NOTATION]); }}


		public NOTATION(System.Xml.XmlNode init) : base(init)
 		{
			instantiateMembers();
		} 
		
		private void instantiateMembers()
		{

		}


		// Attributes


		// Elements
		
	} // class NOTATION

	public class Name : Altova.Xml.TypeBase
	{
		public static Altova.Xml.Meta.SimpleType StaticInfo { get { return new Altova.Xml.Meta.SimpleType(Exchange_TypeInfo.binder.Types[Exchange_TypeInfo._altova_ti_xs_altova_Name]); }}


		public Name(System.Xml.XmlNode init) : base(init)
 		{
			instantiateMembers();
		} 
		
		private void instantiateMembers()
		{

		}


		// Attributes


		// Elements
		
	} // class Name

	public class QName : Altova.Xml.TypeBase
	{
		public static Altova.Xml.Meta.SimpleType StaticInfo { get { return new Altova.Xml.Meta.SimpleType(Exchange_TypeInfo.binder.Types[Exchange_TypeInfo._altova_ti_xs_altova_QName]); }}


		public QName(System.Xml.XmlNode init) : base(init)
 		{
			instantiateMembers();
		} 
		
		private void instantiateMembers()
		{

		}


		// Attributes


		// Elements
		
	} // class QName

	public class anySimpleType : Altova.Xml.TypeBase
	{
		public static Altova.Xml.Meta.SimpleType StaticInfo { get { return new Altova.Xml.Meta.SimpleType(Exchange_TypeInfo.binder.Types[Exchange_TypeInfo._altova_ti_xs_altova_anySimpleType]); }}


		public anySimpleType(System.Xml.XmlNode init) : base(init)
 		{
			instantiateMembers();
		} 
		
		private void instantiateMembers()
		{

		}


		// Attributes


		// Elements
		
	} // class anySimpleType

	public class anyType : Altova.Xml.TypeBase
	{
		public static Altova.Xml.Meta.ComplexType StaticInfo { get { return new Altova.Xml.Meta.ComplexType(Exchange_TypeInfo.binder.Types[Exchange_TypeInfo._altova_ti_xs_altova_anyType]); }}


		public anyType(System.Xml.XmlNode init) : base(init)
 		{
			instantiateMembers();
		} 
		
		private void instantiateMembers()
		{

		}

		internal class Enumerator : EnumeratorBase { 
			public Enumerator(System.Collections.IEnumerator inner) : base(inner) {}
			public override object Current { get { return new anyType((System.Xml.XmlNode)InnerCurrent); } }
		}

		// Attributes
		public string Value
		{
			get 
			{
				Altova.TypeInfo.MemberInfo member = Exchange_TypeInfo.binder.Members[Exchange_TypeInfo._altova_mi_xs_altova_anyType_altova_unnamed];
				return (string)Altova.Xml.XmlTreeOperations.CastToString(Node, member);
			}
			set
			{
				Altova.TypeInfo.MemberInfo member = Exchange_TypeInfo.binder.Members[Exchange_TypeInfo._altova_mi_xs_altova_anyType_altova_unnamed];
				Altova.Xml.XmlTreeOperations.SetValue(Node, member, value);
			}
		}


		// Elements
	
		public void SetXsiType() 
		{ 
			Altova.Xml.XmlTreeOperations.SetAttribute(Node, "xsi:type", "http://www.w3.org/2001/XMLSchema-instance", 
				new System.Xml.XmlQualifiedName("anyType", "http://www.w3.org/2001/XMLSchema")); 				
		}
		
	} // class anyType

	public class anyURI : Altova.Xml.TypeBase
	{
		public static Altova.Xml.Meta.SimpleType StaticInfo { get { return new Altova.Xml.Meta.SimpleType(Exchange_TypeInfo.binder.Types[Exchange_TypeInfo._altova_ti_xs_altova_anyURI]); }}


		public anyURI(System.Xml.XmlNode init) : base(init)
 		{
			instantiateMembers();
		} 
		
		private void instantiateMembers()
		{

		}


		// Attributes


		// Elements
		
	} // class anyURI

	public class base64Binary : Altova.Xml.TypeBase
	{
		public static Altova.Xml.Meta.SimpleType StaticInfo { get { return new Altova.Xml.Meta.SimpleType(Exchange_TypeInfo.binder.Types[Exchange_TypeInfo._altova_ti_xs_altova_base64Binary]); }}


		public base64Binary(System.Xml.XmlNode init) : base(init)
 		{
			instantiateMembers();
		} 
		
		private void instantiateMembers()
		{

		}


		// Attributes


		// Elements
		
	} // class base64Binary

	public class boolean : Altova.Xml.TypeBase
	{
		public static Altova.Xml.Meta.SimpleType StaticInfo { get { return new Altova.Xml.Meta.SimpleType(Exchange_TypeInfo.binder.Types[Exchange_TypeInfo._altova_ti_xs_altova_boolean]); }}


		public boolean(System.Xml.XmlNode init) : base(init)
 		{
			instantiateMembers();
		} 
		
		private void instantiateMembers()
		{

		}


		// Attributes


		// Elements
		
	} // class boolean

	public class byte2 : Altova.Xml.TypeBase
	{
		public static Altova.Xml.Meta.SimpleType StaticInfo { get { return new Altova.Xml.Meta.SimpleType(Exchange_TypeInfo.binder.Types[Exchange_TypeInfo._altova_ti_xs_altova_byte2]); }}


		public byte2(System.Xml.XmlNode init) : base(init)
 		{
			instantiateMembers();
		} 
		
		private void instantiateMembers()
		{

		}


		// Attributes


		// Elements
		
	} // class byte2

	public class date : Altova.Xml.TypeBase
	{
		public static Altova.Xml.Meta.SimpleType StaticInfo { get { return new Altova.Xml.Meta.SimpleType(Exchange_TypeInfo.binder.Types[Exchange_TypeInfo._altova_ti_xs_altova_date]); }}


		public date(System.Xml.XmlNode init) : base(init)
 		{
			instantiateMembers();
		} 
		
		private void instantiateMembers()
		{

		}


		// Attributes


		// Elements
		
	} // class date

	public class dateTime : Altova.Xml.TypeBase
	{
		public static Altova.Xml.Meta.SimpleType StaticInfo { get { return new Altova.Xml.Meta.SimpleType(Exchange_TypeInfo.binder.Types[Exchange_TypeInfo._altova_ti_xs_altova_dateTime]); }}


		public dateTime(System.Xml.XmlNode init) : base(init)
 		{
			instantiateMembers();
		} 
		
		private void instantiateMembers()
		{

		}


		// Attributes


		// Elements
		
	} // class dateTime

	public class decimal2 : Altova.Xml.TypeBase
	{
		public static Altova.Xml.Meta.SimpleType StaticInfo { get { return new Altova.Xml.Meta.SimpleType(Exchange_TypeInfo.binder.Types[Exchange_TypeInfo._altova_ti_xs_altova_decimal2]); }}


		public decimal2(System.Xml.XmlNode init) : base(init)
 		{
			instantiateMembers();
		} 
		
		private void instantiateMembers()
		{

		}


		// Attributes


		// Elements
		
	} // class decimal2

	public class double2 : Altova.Xml.TypeBase
	{
		public static Altova.Xml.Meta.SimpleType StaticInfo { get { return new Altova.Xml.Meta.SimpleType(Exchange_TypeInfo.binder.Types[Exchange_TypeInfo._altova_ti_xs_altova_double2]); }}


		public double2(System.Xml.XmlNode init) : base(init)
 		{
			instantiateMembers();
		} 
		
		private void instantiateMembers()
		{

		}


		// Attributes


		// Elements
		
	} // class double2

	public class duration : Altova.Xml.TypeBase
	{
		public static Altova.Xml.Meta.SimpleType StaticInfo { get { return new Altova.Xml.Meta.SimpleType(Exchange_TypeInfo.binder.Types[Exchange_TypeInfo._altova_ti_xs_altova_duration]); }}


		public duration(System.Xml.XmlNode init) : base(init)
 		{
			instantiateMembers();
		} 
		
		private void instantiateMembers()
		{

		}


		// Attributes


		// Elements
		
	} // class duration

	public class float2 : Altova.Xml.TypeBase
	{
		public static Altova.Xml.Meta.SimpleType StaticInfo { get { return new Altova.Xml.Meta.SimpleType(Exchange_TypeInfo.binder.Types[Exchange_TypeInfo._altova_ti_xs_altova_float2]); }}


		public float2(System.Xml.XmlNode init) : base(init)
 		{
			instantiateMembers();
		} 
		
		private void instantiateMembers()
		{

		}


		// Attributes


		// Elements
		
	} // class float2

	public class gDay : Altova.Xml.TypeBase
	{
		public static Altova.Xml.Meta.SimpleType StaticInfo { get { return new Altova.Xml.Meta.SimpleType(Exchange_TypeInfo.binder.Types[Exchange_TypeInfo._altova_ti_xs_altova_gDay]); }}


		public gDay(System.Xml.XmlNode init) : base(init)
 		{
			instantiateMembers();
		} 
		
		private void instantiateMembers()
		{

		}


		// Attributes


		// Elements
		
	} // class gDay

	public class gMonth : Altova.Xml.TypeBase
	{
		public static Altova.Xml.Meta.SimpleType StaticInfo { get { return new Altova.Xml.Meta.SimpleType(Exchange_TypeInfo.binder.Types[Exchange_TypeInfo._altova_ti_xs_altova_gMonth]); }}


		public gMonth(System.Xml.XmlNode init) : base(init)
 		{
			instantiateMembers();
		} 
		
		private void instantiateMembers()
		{

		}


		// Attributes


		// Elements
		
	} // class gMonth

	public class gMonthDay : Altova.Xml.TypeBase
	{
		public static Altova.Xml.Meta.SimpleType StaticInfo { get { return new Altova.Xml.Meta.SimpleType(Exchange_TypeInfo.binder.Types[Exchange_TypeInfo._altova_ti_xs_altova_gMonthDay]); }}


		public gMonthDay(System.Xml.XmlNode init) : base(init)
 		{
			instantiateMembers();
		} 
		
		private void instantiateMembers()
		{

		}


		// Attributes


		// Elements
		
	} // class gMonthDay

	public class gYear : Altova.Xml.TypeBase
	{
		public static Altova.Xml.Meta.SimpleType StaticInfo { get { return new Altova.Xml.Meta.SimpleType(Exchange_TypeInfo.binder.Types[Exchange_TypeInfo._altova_ti_xs_altova_gYear]); }}


		public gYear(System.Xml.XmlNode init) : base(init)
 		{
			instantiateMembers();
		} 
		
		private void instantiateMembers()
		{

		}


		// Attributes


		// Elements
		
	} // class gYear

	public class gYearMonth : Altova.Xml.TypeBase
	{
		public static Altova.Xml.Meta.SimpleType StaticInfo { get { return new Altova.Xml.Meta.SimpleType(Exchange_TypeInfo.binder.Types[Exchange_TypeInfo._altova_ti_xs_altova_gYearMonth]); }}


		public gYearMonth(System.Xml.XmlNode init) : base(init)
 		{
			instantiateMembers();
		} 
		
		private void instantiateMembers()
		{

		}


		// Attributes


		// Elements
		
	} // class gYearMonth

	public class hexBinary : Altova.Xml.TypeBase
	{
		public static Altova.Xml.Meta.SimpleType StaticInfo { get { return new Altova.Xml.Meta.SimpleType(Exchange_TypeInfo.binder.Types[Exchange_TypeInfo._altova_ti_xs_altova_hexBinary]); }}


		public hexBinary(System.Xml.XmlNode init) : base(init)
 		{
			instantiateMembers();
		} 
		
		private void instantiateMembers()
		{

		}


		// Attributes


		// Elements
		
	} // class hexBinary

	public class int2 : Altova.Xml.TypeBase
	{
		public static Altova.Xml.Meta.SimpleType StaticInfo { get { return new Altova.Xml.Meta.SimpleType(Exchange_TypeInfo.binder.Types[Exchange_TypeInfo._altova_ti_xs_altova_int2]); }}


		public int2(System.Xml.XmlNode init) : base(init)
 		{
			instantiateMembers();
		} 
		
		private void instantiateMembers()
		{

		}


		// Attributes


		// Elements
		
	} // class int2

	public class integer : Altova.Xml.TypeBase
	{
		public static Altova.Xml.Meta.SimpleType StaticInfo { get { return new Altova.Xml.Meta.SimpleType(Exchange_TypeInfo.binder.Types[Exchange_TypeInfo._altova_ti_xs_altova_integer]); }}


		public integer(System.Xml.XmlNode init) : base(init)
 		{
			instantiateMembers();
		} 
		
		private void instantiateMembers()
		{

		}


		// Attributes


		// Elements
		
	} // class integer

	public class language : Altova.Xml.TypeBase
	{
		public static Altova.Xml.Meta.SimpleType StaticInfo { get { return new Altova.Xml.Meta.SimpleType(Exchange_TypeInfo.binder.Types[Exchange_TypeInfo._altova_ti_xs_altova_language]); }}


		public language(System.Xml.XmlNode init) : base(init)
 		{
			instantiateMembers();
		} 
		
		private void instantiateMembers()
		{

		}


		// Attributes


		// Elements
		
	} // class language

	public class long2 : Altova.Xml.TypeBase
	{
		public static Altova.Xml.Meta.SimpleType StaticInfo { get { return new Altova.Xml.Meta.SimpleType(Exchange_TypeInfo.binder.Types[Exchange_TypeInfo._altova_ti_xs_altova_long2]); }}


		public long2(System.Xml.XmlNode init) : base(init)
 		{
			instantiateMembers();
		} 
		
		private void instantiateMembers()
		{

		}


		// Attributes


		// Elements
		
	} // class long2

	public class negativeInteger : Altova.Xml.TypeBase
	{
		public static Altova.Xml.Meta.SimpleType StaticInfo { get { return new Altova.Xml.Meta.SimpleType(Exchange_TypeInfo.binder.Types[Exchange_TypeInfo._altova_ti_xs_altova_negativeInteger]); }}


		public negativeInteger(System.Xml.XmlNode init) : base(init)
 		{
			instantiateMembers();
		} 
		
		private void instantiateMembers()
		{

		}


		// Attributes


		// Elements
		
	} // class negativeInteger

	public class nonNegativeInteger : Altova.Xml.TypeBase
	{
		public static Altova.Xml.Meta.SimpleType StaticInfo { get { return new Altova.Xml.Meta.SimpleType(Exchange_TypeInfo.binder.Types[Exchange_TypeInfo._altova_ti_xs_altova_nonNegativeInteger]); }}


		public nonNegativeInteger(System.Xml.XmlNode init) : base(init)
 		{
			instantiateMembers();
		} 
		
		private void instantiateMembers()
		{

		}


		// Attributes


		// Elements
		
	} // class nonNegativeInteger

	public class nonPositiveInteger : Altova.Xml.TypeBase
	{
		public static Altova.Xml.Meta.SimpleType StaticInfo { get { return new Altova.Xml.Meta.SimpleType(Exchange_TypeInfo.binder.Types[Exchange_TypeInfo._altova_ti_xs_altova_nonPositiveInteger]); }}


		public nonPositiveInteger(System.Xml.XmlNode init) : base(init)
 		{
			instantiateMembers();
		} 
		
		private void instantiateMembers()
		{

		}


		// Attributes


		// Elements
		
	} // class nonPositiveInteger

	public class normalizedString : Altova.Xml.TypeBase
	{
		public static Altova.Xml.Meta.SimpleType StaticInfo { get { return new Altova.Xml.Meta.SimpleType(Exchange_TypeInfo.binder.Types[Exchange_TypeInfo._altova_ti_xs_altova_normalizedString]); }}


		public normalizedString(System.Xml.XmlNode init) : base(init)
 		{
			instantiateMembers();
		} 
		
		private void instantiateMembers()
		{

		}


		// Attributes


		// Elements
		
	} // class normalizedString

	public class positiveInteger : Altova.Xml.TypeBase
	{
		public static Altova.Xml.Meta.SimpleType StaticInfo { get { return new Altova.Xml.Meta.SimpleType(Exchange_TypeInfo.binder.Types[Exchange_TypeInfo._altova_ti_xs_altova_positiveInteger]); }}


		public positiveInteger(System.Xml.XmlNode init) : base(init)
 		{
			instantiateMembers();
		} 
		
		private void instantiateMembers()
		{

		}


		// Attributes


		// Elements
		
	} // class positiveInteger

	public class short2 : Altova.Xml.TypeBase
	{
		public static Altova.Xml.Meta.SimpleType StaticInfo { get { return new Altova.Xml.Meta.SimpleType(Exchange_TypeInfo.binder.Types[Exchange_TypeInfo._altova_ti_xs_altova_short2]); }}


		public short2(System.Xml.XmlNode init) : base(init)
 		{
			instantiateMembers();
		} 
		
		private void instantiateMembers()
		{

		}


		// Attributes


		// Elements
		
	} // class short2

	public class string2 : Altova.Xml.TypeBase
	{
		public static Altova.Xml.Meta.SimpleType StaticInfo { get { return new Altova.Xml.Meta.SimpleType(Exchange_TypeInfo.binder.Types[Exchange_TypeInfo._altova_ti_xs_altova_string2]); }}


		public string2(System.Xml.XmlNode init) : base(init)
 		{
			instantiateMembers();
		} 
		
		private void instantiateMembers()
		{

		}


		// Attributes


		// Elements
		
	} // class string2

	public class time : Altova.Xml.TypeBase
	{
		public static Altova.Xml.Meta.SimpleType StaticInfo { get { return new Altova.Xml.Meta.SimpleType(Exchange_TypeInfo.binder.Types[Exchange_TypeInfo._altova_ti_xs_altova_time]); }}


		public time(System.Xml.XmlNode init) : base(init)
 		{
			instantiateMembers();
		} 
		
		private void instantiateMembers()
		{

		}


		// Attributes


		// Elements
		
	} // class time

	public class token : Altova.Xml.TypeBase
	{
		public static Altova.Xml.Meta.SimpleType StaticInfo { get { return new Altova.Xml.Meta.SimpleType(Exchange_TypeInfo.binder.Types[Exchange_TypeInfo._altova_ti_xs_altova_token]); }}


		public token(System.Xml.XmlNode init) : base(init)
 		{
			instantiateMembers();
		} 
		
		private void instantiateMembers()
		{

		}


		// Attributes


		// Elements
		
	} // class token

	public class unsignedByte : Altova.Xml.TypeBase
	{
		public static Altova.Xml.Meta.SimpleType StaticInfo { get { return new Altova.Xml.Meta.SimpleType(Exchange_TypeInfo.binder.Types[Exchange_TypeInfo._altova_ti_xs_altova_unsignedByte]); }}


		public unsignedByte(System.Xml.XmlNode init) : base(init)
 		{
			instantiateMembers();
		} 
		
		private void instantiateMembers()
		{

		}


		// Attributes


		// Elements
		
	} // class unsignedByte

	public class unsignedInt : Altova.Xml.TypeBase
	{
		public static Altova.Xml.Meta.SimpleType StaticInfo { get { return new Altova.Xml.Meta.SimpleType(Exchange_TypeInfo.binder.Types[Exchange_TypeInfo._altova_ti_xs_altova_unsignedInt]); }}


		public unsignedInt(System.Xml.XmlNode init) : base(init)
 		{
			instantiateMembers();
		} 
		
		private void instantiateMembers()
		{

		}


		// Attributes


		// Elements
		
	} // class unsignedInt

	public class unsignedLong : Altova.Xml.TypeBase
	{
		public static Altova.Xml.Meta.SimpleType StaticInfo { get { return new Altova.Xml.Meta.SimpleType(Exchange_TypeInfo.binder.Types[Exchange_TypeInfo._altova_ti_xs_altova_unsignedLong]); }}


		public unsignedLong(System.Xml.XmlNode init) : base(init)
 		{
			instantiateMembers();
		} 
		
		private void instantiateMembers()
		{

		}


		// Attributes


		// Elements
		
	} // class unsignedLong

	public class unsignedShort : Altova.Xml.TypeBase
	{
		public static Altova.Xml.Meta.SimpleType StaticInfo { get { return new Altova.Xml.Meta.SimpleType(Exchange_TypeInfo.binder.Types[Exchange_TypeInfo._altova_ti_xs_altova_unsignedShort]); }}


		public unsignedShort(System.Xml.XmlNode init) : base(init)
 		{
			instantiateMembers();
		} 
		
		private void instantiateMembers()
		{

		}


		// Attributes


		// Elements
		
	} // class unsignedShort


} // namespace xs


}
